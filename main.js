/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var $=Object.create;var v=Object.defineProperty;var I=Object.getOwnPropertyDescriptor;var O=Object.getOwnPropertyNames;var K=Object.getPrototypeOf,F=Object.prototype.hasOwnProperty;var _=(o,c)=>{for(var t in c)v(o,t,{get:c[t],enumerable:!0})},C=(o,c,t,a)=>{if(c&&typeof c=="object"||typeof c=="function")for(let l of O(c))!F.call(o,l)&&l!==t&&v(o,l,{get:()=>c[l],enumerable:!(a=I(c,l))||a.enumerable});return o};var B=(o,c,t)=>(t=o!=null?$(K(o)):{},C(c||!o||!o.__esModule?v(t,"default",{value:o,enumerable:!0}):t,o)),z=o=>C(v({},"__esModule",{value:!0}),o);var W={};_(W,{default:()=>R});module.exports=z(W);var g=require("obsidian"),x=B(require("path")),D=require("child_process"),V={githubRepoUrl:"",localMarkdownPath:"",gitPassword:"",gitAuthorName:"",gitAuthorEmail:""},R=class extends g.Plugin{async onload(){await this.loadSettings(),this.addRibbonIcon("cloud-lightning","Krems Publisher",t=>{new S(this.app,this).open()}),this.addSettingTab(new M(this.app,this)),console.log("Krems Obsidian Plugin loaded.")}onunload(){console.log("Krems Obsidian Plugin unloaded.")}async loadSettings(){this.settings=Object.assign({},V,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}async execShellCommand(t,a,l){return new Promise((E,u)=>{let h=l?{...process.env,...l}:process.env;(0,D.exec)(t,{cwd:a,env:h},(d,s,e)=>{if(d){console.error(`exec error: ${d.message}`),u(`Error: ${d.message}
Stderr: ${e}`);return}e&&console.warn(`exec stderr: ${e}`),E(s.trim())})})}},S=class extends g.Modal{constructor(t,a){super(t);this.plugin=a}onOpen(){let{contentEl:t}=this;t.empty(),t.createEl("h2",{text:"Krems Publisher Actions"});let a=t.createDiv({cls:"krems-modal-section"});a.createEl("h4",{text:"1. Initialize Local Directory"}),a.createEl("p",{text:`This will clone krems-example into your specified local directory (${this.plugin.settings.localMarkdownPath||"not set"}) and set its remote to your GitHub repo.`});let l=a.createEl("button",{text:"Initialize Directory"}),E=a.createEl("div",{cls:"krems-feedback",attr:{style:"margin-top: 10px;"}}),u=(n,f)=>{E.textContent=n,E.className=`krems-feedback krems-feedback-${f}`};l.addEventListener("click",async()=>{let{localMarkdownPath:n,githubRepoUrl:f}=this.plugin.settings;if(!n||!f){u("Error: Local Markdown Directory and GitHub Repo URL must be set in plugin settings.","error");return}let k=this.app.vault.adapter.getBasePath(),p=x.join(k,n);try{let m=this.app.vault.adapter;if(await m.exists(p)){let y=await m.stat(p);if(y&&y.type==="folder"){let b=await m.list(p);if(b.files.length>0||b.folders.length>0){u(`Error: Directory '${n}' already exists and is not empty. Please choose an empty or new directory.`,"error");return}}else{u(`Error: Path '${n}' exists but is not a directory.`,"error");return}}}catch(m){console.log("Directory check for init:",m)}l.disabled=!0,u("Cloning krems-example repository...","status");try{let m=`git clone https://github.com/mreider/krems-example "${p}"`;await this.plugin.execShellCommand(m,k),u("Repository cloned. Setting remote URL...","status");let y=`git -C "${p}" remote set-url origin "${f}"`;await this.plugin.execShellCommand(y,k),u("Remote URL set. Cleaning up README.md...","status");let b=x.join(p,"README.md");await this.app.vault.adapter.exists(b)?(await this.app.vault.adapter.remove(b),u("Directory initialized successfully! README.md removed.","success")):u("Directory initialized successfully! (README.md not found to remove).","success")}catch(m){console.error("Initialization error:",m),u(`Initialization failed: ${m}`,"error")}finally{l.disabled=!1}}),(!this.plugin.settings.localMarkdownPath||!this.plugin.settings.githubRepoUrl)&&(l.disabled=!0,a.createEl("p",{text:"Please set Local Markdown Directory and GitHub Repo URL in settings.",cls:"krems-warning"}));let h=t.createDiv({cls:"krems-modal-section"});h.createEl("h4",{text:"3. Push Site to GitHub"}),h.createEl("p",{text:`This will add, commit, and push the content of '${this.plugin.settings.localMarkdownPath||"not set"}' to your GitHub repo.`});let d=h.createEl("input",{type:"text",placeholder:"Optional commit message (default: latest site version)"});d.style.width="100%",d.style.marginBottom="10px";let s=h.createEl("button",{text:"Push to GitHub"}),e=h.createEl("div",{cls:"krems-feedback",attr:{style:"margin-top: 10px;"}}),i=(n,f)=>{e.textContent=n,e.className=`krems-feedback krems-feedback-${f}`};s.addEventListener("click",async()=>{let{localMarkdownPath:n,githubRepoUrl:f}=this.plugin.settings;if(!n||!f){i("Error: Local Markdown Directory and GitHub Repo URL must be set in plugin settings.","error");return}let k=this.app.vault.adapter.getBasePath(),p=x.join(k,n),y=(d.value.trim()||"latest site version").replace(/"/g,'\\"');s.disabled=!0,d.disabled=!0,i("Preparing to push site...","status");try{i("Adding files (git add .)...","status"),await this.plugin.execShellCommand("git add .",p),i(`Committing with message: "${y}"...`,"status");let b=this.plugin.settings.gitAuthorName||"Krems Obsidian Plugin",T=this.plugin.settings.gitAuthorEmail||"krems-plugin@example.com",G={GIT_AUTHOR_NAME:b,GIT_AUTHOR_EMAIL:T,GIT_COMMITTER_NAME:b,GIT_COMMITTER_EMAIL:T};try{await this.plugin.execShellCommand(`git commit -m "${y}"`,p,G)}catch(w){if(w.toString().includes("nothing to commit"))i("No changes to commit. Proceeding to push...","status");else throw w}i("Pushing to remote repository...","status");let L="git push",{gitPassword:A,githubRepoUrl:P}=this.plugin.settings;if(A&&P.startsWith("https://")){let w=P.substring(8),N=`https://${A}@${w}`,U="main";try{U=await this.plugin.execShellCommand("git rev-parse --abbrev-ref HEAD",p)}catch(H){console.warn("Could not determine current branch, defaulting to 'main'. Error:",H),i('Warning: Could not determine current branch, attempting to push to "main".',"status")}L=`git push ${N} ${U}`,i(`Pushing to ${P} with authentication...`,"status")}else i(`Pushing to ${P} (no token/password provided or not HTTPS URL)...`,"status");await this.plugin.execShellCommand(L,p),i("Site pushed successfully!","success")}catch(b){console.error("Push error:",b),i(`Push failed: ${b}`,"error")}finally{s.disabled=!1,d.disabled=!1}}),(!this.plugin.settings.localMarkdownPath||!this.plugin.settings.githubRepoUrl)&&(s.disabled=!0,d.disabled=!0,h.createEl("p",{text:"Please set Local Markdown Directory and GitHub Repo URL in settings.",cls:"krems-warning"})),t.createEl("hr");let r=t.createEl("p",{cls:"krems-modal-footer"});r.setText("For help, see the "),r.createEl("a",{text:"plugin documentation",href:"https://github.com/mreider/krems-obsidian-plugin/",attr:{target:"_blank",rel:"noopener noreferrer"}}),r.appendText(".")}onClose(){let{contentEl:t}=this;t.empty()}},M=class extends g.PluginSettingTab{constructor(t,a){super(t,a);this.plugin=a}display(){let{containerEl:t}=this;t.empty(),t.createEl("h2",{text:"Krems Publisher Settings"});let a=(s,e,i,r)=>{s.classList.remove("krems-input-valid","krems-input-invalid"),e.classList.remove("krems-feedback-valid","krems-feedback-invalid"),e.textContent=i,e.style.display=i?"block":"none",i&&(s.classList.add(r?"krems-input-valid":"krems-input-invalid"),e.classList.add(r?"krems-feedback-valid":"krems-feedback-invalid"))},l=new g.Setting(t).setName("GitHub Repository URL").setDesc("HTTPS URL of your GitHub repository (e.g., https://github.com/username/repo). Do not include .git at the end."),E=l.controlEl.createEl("div",{cls:"krems-setting-feedback",attr:{id:"repo-url-feedback",style:"display: none; margin-top: 5px;"}});l.addText(s=>{s.setPlaceholder("https://github.com/username/repo").setValue(this.plugin.settings.githubRepoUrl).onChange(async e=>{this.plugin.settings.githubRepoUrl=e.trim(),await this.plugin.saveSettings()}),s.inputEl.addEventListener("focusout",async()=>{let e=this.plugin.settings.githubRepoUrl,i=!0,r="";if(!e){a(s.inputEl,E,"",!0);return}if(!e.startsWith("https://github.com/"))i=!1,r="URL must start with https://github.com/";else if(e.endsWith(".git"))i=!1,r="URL should not end with .git";else{let n=e.substring(19).split("/");(n.length<2||!n[0]||!n[1])&&(i=!1,r="Invalid GitHub repository URL format.")}i&&r===""&&(r="URL format is valid."),a(s.inputEl,E,r,i)}),this.plugin.settings.githubRepoUrl&&s.inputEl.dispatchEvent(new Event("focusout"))});let u=new g.Setting(t).setName("Local Markdown Directory").setDesc("Path to the directory in your vault for your Krems site (e.g., MyKremsSite)."),h=u.controlEl.createEl("div",{cls:"krems-setting-feedback",attr:{id:"local-path-feedback",style:"display: none; margin-top: 5px;"}});u.addText(s=>{s.setPlaceholder("e.g., MyKremsSite or path/to/site").setValue(this.plugin.settings.localMarkdownPath).onChange(async e=>{this.plugin.settings.localMarkdownPath=e.trim(),await this.plugin.saveSettings()}),s.inputEl.addEventListener("focusout",async()=>{let e=this.plugin.settings.localMarkdownPath,i=!1,r="";if(!e){a(s.inputEl,h,"",!0);return}let n=this.app.vault.getAbstractFileByPath(e);n&&n instanceof g.TFolder?(i=!0,r="Directory exists."):(i=!1,r="Directory not found in the vault."),a(s.inputEl,h,r,i)}),this.plugin.settings.localMarkdownPath&&s.inputEl.dispatchEvent(new Event("focusout"))}),new g.Setting(t).setName("GitHub Personal Access Token (PAT)").setDesc('Required for pushing to HTTPS repositories. Create a PAT on GitHub with "repo" scope. See plugin README for instructions.').addText(s=>{s.inputEl.type="password",s.setPlaceholder("Enter your GitHub PAT").setValue(this.plugin.settings.gitPassword||"").onChange(async e=>{this.plugin.settings.gitPassword=e,await this.plugin.saveSettings()})}),new g.Setting(t).setName("Git Author Name").setDesc("Name to use for Git commits (e.g., Your Name). If blank, a default will be used.").addText(s=>s.setPlaceholder("Your Name").setValue(this.plugin.settings.gitAuthorName||"").onChange(async e=>{this.plugin.settings.gitAuthorName=e.trim(),await this.plugin.saveSettings()})),new g.Setting(t).setName("Git Author Email").setDesc("Email to use for Git commits (e.g., your.email@example.com). If blank, a default will be used.").addText(s=>s.setPlaceholder("your.email@example.com").setValue(this.plugin.settings.gitAuthorEmail||"").onChange(async e=>{this.plugin.settings.gitAuthorEmail=e.trim(),await this.plugin.saveSettings()})),t.createEl("hr");let d=t.createEl("p",{cls:"krems-settings-footer"});d.setText("For plugin instructions, troubleshooting, and more information, please visit the "),d.createEl("a",{text:"plugin documentation on GitHub",href:"https://github.com/mreider/krems-obsidian-plugin/",attr:{target:"_blank",rel:"noopener noreferrer"}}),d.setText(".")}};
