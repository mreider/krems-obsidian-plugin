/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var $=Object.create;var S=Object.defineProperty;var F=Object.getOwnPropertyDescriptor;var G=Object.getOwnPropertyNames;var H=Object.getPrototypeOf,B=Object.prototype.hasOwnProperty;var O=(o,d)=>{for(var t in d)S(o,t,{get:d[t],enumerable:!0})},D=(o,d,t,r)=>{if(d&&typeof d=="object"||typeof d=="function")for(let c of G(d))!B.call(o,c)&&c!==t&&S(o,c,{get:()=>d[c],enumerable:!(r=F(d,c))||r.enumerable});return o};var A=(o,d,t)=>(t=o!=null?$(H(o)):{},D(d||!o||!o.__esModule?S(t,"default",{value:o,enumerable:!0}):t,o)),I=o=>D(S({},"__esModule",{value:!0}),o);var z={};O(z,{default:()=>L});module.exports=I(z);var k=require("obsidian"),R=A(require("path")),K=require("child_process"),N={githubRepoUrl:"",localMarkdownPath:"",gitPassword:""},L=class extends k.Plugin{constructor(){super(...arguments);this.isKremsRunning=!1;this.kremsProcess=null}async onload(){await this.loadSettings(),this.addRibbonIcon("cloud-lightning","Krems Publisher",t=>{new T(this.app,this).open()}),this.addSettingTab(new U(this.app,this)),console.log("Krems Obsidian Plugin loaded.")}onunload(){console.log("Krems Obsidian Plugin unloaded.")}async loadSettings(){this.settings=Object.assign({},N,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}async execShellCommand(t,r){return new Promise((c,w)=>{(0,K.exec)(t,{cwd:r},(g,f,u)=>{if(g){console.error(`exec error: ${g.message}`),w(`Error: ${g.message}
Stderr: ${u}`);return}u&&console.warn(`exec stderr: ${u}`),c(f.trim())})})}},T=class extends k.Modal{constructor(t,r){super(t);this.plugin=r}onOpen(){let{contentEl:t}=this;t.empty(),t.createEl("h2",{text:"Krems Publisher Actions"});let r=t.createDiv({cls:"krems-modal-section"});r.createEl("h4",{text:"1. Initialize Local Directory"}),r.createEl("p",{text:`This will clone krems-example into your specified local directory (${this.plugin.settings.localMarkdownPath||"not set"}) and set its remote to your GitHub repo.`});let c=r.createEl("button",{text:"Initialize Directory"}),w=r.createEl("div",{cls:"krems-feedback",attr:{style:"margin-top: 10px;"}}),g=(l,m)=>{w.textContent=l,w.className=`krems-feedback krems-feedback-${m}`};c.addEventListener("click",async()=>{let{localMarkdownPath:l,githubRepoUrl:m}=this.plugin.settings;if(!l||!m){g("Error: Local Markdown Directory and GitHub Repo URL must be set in plugin settings.","error");return}let E=this.app.vault.adapter.getBasePath(),b=R.join(E,l);try{let p=this.app.vault.adapter;if(await p.exists(b)){let a=await p.stat(b);if(a&&a.type==="folder"){let P=await p.list(b);if(P.files.length>0||P.folders.length>0){g(`Error: Directory '${l}' already exists and is not empty. Please choose an empty or new directory.`,"error");return}}else{g(`Error: Path '${l}' exists but is not a directory.`,"error");return}}}catch(p){console.log("Directory check for init:",p)}c.disabled=!0,g("Cloning krems-example repository...","status");try{let p=`git clone https://github.com/mreider/krems-example "${b}"`;await this.plugin.execShellCommand(p,E),g("Repository cloned. Setting remote URL...","status");let a=`git -C "${b}" remote set-url origin "${m}"`;await this.plugin.execShellCommand(a,E),g("Directory initialized successfully!","success")}catch(p){console.error("Initialization error:",p),g(`Initialization failed: ${p}`,"error")}finally{c.disabled=!1}}),(!this.plugin.settings.localMarkdownPath||!this.plugin.settings.githubRepoUrl)&&(c.disabled=!0,r.createEl("p",{text:"Please set Local Markdown Directory and GitHub Repo URL in settings.",cls:"krems-warning"}));let f=t.createDiv({cls:"krems-modal-section"});f.createEl("h4",{text:"2. Manage Local Krems Server"});let u=f.createEl("button",{text:"Start Krems Locally"}),i=f.createEl("button",{text:"Stop Krems Server"}),s=f.createEl("div",{cls:"krems-feedback",attr:{style:"margin-top: 10px; white-space: pre-wrap; background-color: var(--background-secondary); padding: 5px; border-radius: 3px; max-height: 150px; overflow-y: auto;"}}),e=(l,m)=>{m==="log"?(s.textContent+=l+`
`,s.scrollTop=s.scrollHeight):s.textContent=l,s.className=`krems-feedback krems-feedback-${m}`},n=()=>{this.plugin.isKremsRunning?(u.setText("Krems Server Running"),u.disabled=!0,i.disabled=!1):(u.setText("Start Krems Locally"),u.disabled=!1,i.disabled=!0)};n(),u.addEventListener("click",async()=>{var b,p;let{localMarkdownPath:l}=this.plugin.settings;if(!l){e("Error: Local Markdown Directory must be set in plugin settings.","error");return}if(this.plugin.isKremsRunning||this.plugin.kremsProcess){e("Krems is already running or process exists.","status");return}let m=this.app.vault.adapter.getBasePath(),E=R.join(m,l);e("Starting Krems server...","status"),u.disabled=!0;try{this.plugin.kremsProcess=(0,K.spawn)("krems",["--run"],{cwd:E,shell:!0}),this.plugin.isKremsRunning=!0,n(),e(`Krems server started. Output:
`,"log"),window.open("http://localhost:8080","_blank"),(b=this.plugin.kremsProcess.stdout)==null||b.on("data",a=>{e(a.toString(),"log")}),(p=this.plugin.kremsProcess.stderr)==null||p.on("data",a=>{e(`[STDERR] ${a.toString()}`,"log")}),this.plugin.kremsProcess.on("error",a=>{console.error("Failed to start Krems process:",a),e(`Failed to start Krems: ${a.message}`,"error"),this.plugin.isKremsRunning=!1,this.plugin.kremsProcess=null,n()}),this.plugin.kremsProcess.on("close",a=>{e(`Krems server exited with code ${a}.`,a===0?"status":"error"),this.plugin.isKremsRunning=!1,this.plugin.kremsProcess=null,n()})}catch(a){console.error("Error spawning Krems:",a),e(`Error starting Krems: ${a}`,"error"),this.plugin.isKremsRunning=!1,this.plugin.kremsProcess=null,n()}}),i.addEventListener("click",async()=>{this.plugin.kremsProcess?(e("Stopping Krems server...","status"),this.plugin.kremsProcess.kill()):(e("Krems server is not running.","status"),this.plugin.isKremsRunning=!1,n())}),this.plugin.settings.localMarkdownPath||(u.disabled=!0,i.disabled=!0,f.createEl("p",{text:"Please set Local Markdown Directory in settings.",cls:"krems-warning"}));let h=t.createDiv({cls:"krems-modal-section"});h.createEl("h4",{text:"3. Push Site to GitHub"}),h.createEl("p",{text:`This will add, commit, and push the content of '${this.plugin.settings.localMarkdownPath||"not set"}' to your GitHub repo.`});let v=h.createEl("input",{type:"text",placeholder:"Optional commit message (default: latest site version)"});v.style.width="100%",v.style.marginBottom="10px";let x=h.createEl("button",{text:"Push to GitHub"}),C=h.createEl("div",{cls:"krems-feedback",attr:{style:"margin-top: 10px;"}}),y=(l,m)=>{C.textContent=l,C.className=`krems-feedback krems-feedback-${m}`};x.addEventListener("click",async()=>{let{localMarkdownPath:l,githubRepoUrl:m}=this.plugin.settings;if(!l||!m){y("Error: Local Markdown Directory and GitHub Repo URL must be set in plugin settings.","error");return}let E=this.app.vault.adapter.getBasePath(),b=R.join(E,l),a=(v.value.trim()||"latest site version").replace(/"/g,'\\"');x.disabled=!0,v.disabled=!0,y("Preparing to push site...","status");try{y("Adding files (git add .)...","status"),await this.plugin.execShellCommand("git add .",b),y(`Committing with message: "${a}"...`,"status");try{await this.plugin.execShellCommand(`git commit -m "${a}"`,b)}catch(P){if(P.toString().includes("nothing to commit"))y("No changes to commit. Proceeding to push...","status");else throw P}y("Pushing to remote repository...","status"),await this.plugin.execShellCommand("git push",b),y("Site pushed successfully!","success")}catch(P){console.error("Push error:",P),y(`Push failed: ${P}`,"error")}finally{x.disabled=!1,v.disabled=!1}}),(!this.plugin.settings.localMarkdownPath||!this.plugin.settings.githubRepoUrl)&&(x.disabled=!0,v.disabled=!0,h.createEl("p",{text:"Please set Local Markdown Directory and GitHub Repo URL in settings.",cls:"krems-warning"})),t.createEl("hr");let M=t.createEl("p",{cls:"krems-modal-footer"});M.setText("For help, see the "),M.createEl("a",{text:"plugin documentation",href:"https://github.com/mreider/krems-obsidian-plugin/",attr:{target:"_blank",rel:"noopener noreferrer"}}),M.appendText(".")}onClose(){let{contentEl:t}=this;t.empty()}},U=class extends k.PluginSettingTab{constructor(t,r){super(t,r);this.plugin=r}display(){let{containerEl:t}=this;t.empty(),t.createEl("h2",{text:"Krems Publisher Settings"});let r=(i,s,e,n)=>{i.classList.remove("krems-input-valid","krems-input-invalid"),s.classList.remove("krems-feedback-valid","krems-feedback-invalid"),s.textContent=e,s.style.display=e?"block":"none",e&&(i.classList.add(n?"krems-input-valid":"krems-input-invalid"),s.classList.add(n?"krems-feedback-valid":"krems-feedback-invalid"))},c=new k.Setting(t).setName("GitHub Repository URL").setDesc("HTTPS URL of your GitHub repository (e.g., https://github.com/username/repo). Do not include .git at the end."),w=c.controlEl.createEl("div",{cls:"krems-setting-feedback",attr:{id:"repo-url-feedback",style:"display: none; margin-top: 5px;"}});c.addText(i=>{i.setPlaceholder("https://github.com/username/repo").setValue(this.plugin.settings.githubRepoUrl).onChange(async s=>{this.plugin.settings.githubRepoUrl=s.trim(),await this.plugin.saveSettings()}),i.inputEl.addEventListener("focusout",async()=>{let s=this.plugin.settings.githubRepoUrl,e=!0,n="";if(!s){r(i.inputEl,w,"",!0);return}if(!s.startsWith("https://github.com/"))e=!1,n="URL must start with https://github.com/";else if(s.endsWith(".git"))e=!1,n="URL should not end with .git";else{let h=s.substring(19).split("/");(h.length<2||!h[0]||!h[1])&&(e=!1,n="Invalid GitHub repository URL format.")}e&&n===""&&(n="URL format is valid."),r(i.inputEl,w,n,e)}),this.plugin.settings.githubRepoUrl&&i.inputEl.dispatchEvent(new Event("focusout"))});let g=new k.Setting(t).setName("Local Markdown Directory").setDesc("Path to the directory in your vault for your Krems site (e.g., MyKremsSite)."),f=g.controlEl.createEl("div",{cls:"krems-setting-feedback",attr:{id:"local-path-feedback",style:"display: none; margin-top: 5px;"}});g.addText(i=>{i.setPlaceholder("e.g., MyKremsSite or path/to/site").setValue(this.plugin.settings.localMarkdownPath).onChange(async s=>{this.plugin.settings.localMarkdownPath=s.trim(),await this.plugin.saveSettings()}),i.inputEl.addEventListener("focusout",async()=>{let s=this.plugin.settings.localMarkdownPath,e=!1,n="";if(!s){r(i.inputEl,f,"",!0);return}let h=this.app.vault.getAbstractFileByPath(s);h&&h instanceof k.TFolder?(e=!0,n="Directory exists."):(e=!1,n="Directory not found in the vault."),r(i.inputEl,f,n,e)}),this.plugin.settings.localMarkdownPath&&i.inputEl.dispatchEvent(new Event("focusout"))}),new k.Setting(t).setName("Git Token/Password (Optional)").setDesc("Enter your Git password or Personal Access Token (PAT) if required for push operations. PAT is recommended for security.").addText(i=>{i.inputEl.type="password",i.setPlaceholder("Enter your Git token/password").setValue(this.plugin.settings.gitPassword||"").onChange(async s=>{this.plugin.settings.gitPassword=s,await this.plugin.saveSettings()})}),t.createEl("hr");let u=t.createEl("p",{cls:"krems-settings-footer"});u.setText("For plugin instructions, troubleshooting, and more information, please visit the "),u.createEl("a",{text:"plugin documentation on GitHub",href:"https://github.com/mreider/krems-obsidian-plugin/",attr:{target:"_blank",rel:"noopener noreferrer"}}),u.setText(".")}};
