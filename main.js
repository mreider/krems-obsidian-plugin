/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var O=Object.create;var x=Object.defineProperty;var K=Object.getOwnPropertyDescriptor;var F=Object.getOwnPropertyNames;var _=Object.getPrototypeOf,B=Object.prototype.hasOwnProperty;var z=(d,h)=>{for(var t in h)x(d,t,{get:h[t],enumerable:!0})},U=(d,h,t,a)=>{if(h&&typeof h=="object"||typeof h=="function")for(let g of F(h))!B.call(d,g)&&g!==t&&x(d,g,{get:()=>h[g],enumerable:!(a=K(h,g))||a.enumerable});return d};var V=(d,h,t)=>(t=d!=null?O(_(d)):{},U(h||!d||!d.__esModule?x(t,"default",{value:d,enumerable:!0}):t,d)),W=d=>U(x({},"__esModule",{value:!0}),d);var J={};z(J,{default:()=>S});module.exports=W(J);var p=require("obsidian"),M=V(require("path")),H=require("child_process"),j={githubRepoUrl:"",localMarkdownPath:"",gitPassword:"",gitAuthorName:"",gitAuthorEmail:""},S=class extends p.Plugin{async onload(){await this.loadSettings(),this.addRibbonIcon("cloud-lightning","Krems Publisher",t=>{new C(this.app,this).open()}),this.addSettingTab(new L(this.app,this)),console.log("Krems Obsidian Plugin loaded.")}onunload(){console.log("Krems Obsidian Plugin unloaded.")}async loadSettings(){this.settings=Object.assign({},j,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}async execShellCommand(t,a,g,e){return new Promise((s,l)=>{let n=g?{...process.env,...g}:process.env,c=e||t;(0,H.exec)(t,{cwd:a,env:n},(u,i,k)=>{let o={stdout:i.trim(),stderr:k.trim()};if(u){console.error(`Command failed: ${c}
Error: ${u.message}
Stdout: ${o.stdout}
Stderr: ${o.stderr}`),l({message:`Command failed: ${c}. Error: ${u.message}`,stdout:o.stdout,stderr:o.stderr,originalError:u});return}o.stderr&&console.warn(`Command successful but stderr present: ${c}
Stderr: ${o.stderr}`),s(o)})})}},C=class extends p.Modal{constructor(t,a){super(t);this.plugin=a}onOpen(){let{contentEl:t}=this;t.empty(),t.createEl("h2",{text:"Krems Publisher Actions"});let a=t.createDiv({cls:"krems-modal-section"});a.createEl("h4",{text:"1. Initialize Local Directory"}),a.createEl("p",{text:`This will clone krems-example into your specified local directory (${this.plugin.settings.localMarkdownPath||"not set"}) and set its remote to your GitHub repo.`});let g=a.createEl("button",{text:"Initialize Directory"}),e=a.createEl("div",{cls:"krems-feedback",attr:{style:"margin-top: 10px;"}}),s=(o,b)=>{e.textContent=o,e.className=`krems-feedback krems-feedback-${b}`};g.addEventListener("click",async()=>{let{localMarkdownPath:o,githubRepoUrl:b}=this.plugin.settings;if(!o||!b){s("Error: Local Markdown Directory and GitHub Repo URL must be set in plugin settings.","error");return}let w=this.app.vault.adapter.getBasePath(),y=M.join(w,o);try{let m=this.app.vault.adapter;if(await m.exists(y)){let E=await m.stat(y);if(E&&E.type==="folder"){let f=await m.list(y);if(f.files.length>0||f.folders.length>0){s(`Error: Directory '${o}' already exists and is not empty. Please choose an empty or new directory.`,"error");return}}else if(E){s(`Error: Path '${o}' exists but is not a directory.`,"error");return}}}catch(m){console.log("Directory check for init (error likely means dir doesn't exist, which is OK for clone):",m)}g.disabled=!0,s("Cloning krems-example repository...","status");try{let m=`git clone https://github.com/mreider/krems-example "${y}"`;await this.plugin.execShellCommand(m,w,void 0,"git clone <example-repo> <path>"),s("Repository cloned. Setting remote URL...","status");let E=`git -C "${y}" remote set-url origin "${b}"`;await this.plugin.execShellCommand(E,w,void 0,"git remote set-url origin <user-repo-url>"),s("Remote URL set. Cleaning up README.md...","status");let f=M.join(y,"README.md");await this.app.vault.adapter.exists(f)?(await this.app.vault.adapter.remove(f),s("Directory initialized successfully! README.md removed.","success")):s("Directory initialized successfully! (README.md not found to remove).","success")}catch(m){console.error("Initialization error:",m.message||m);let E=m.stderr||m.message||m.toString();s(`Initialization failed: ${E}`,"error")}finally{g.disabled=!1}}),(!this.plugin.settings.localMarkdownPath||!this.plugin.settings.githubRepoUrl)&&(g.disabled=!0,a.createEl("p",{text:"Please set Local Markdown Directory and GitHub Repo URL in settings.",cls:"krems-warning"}));let l=t.createDiv({cls:"krems-modal-section"});l.createEl("h4",{text:"2. Push Site to GitHub"}),l.createEl("p",{text:`This will add, commit, and push the content of '${this.plugin.settings.localMarkdownPath||"not set"}' to your GitHub repo.`});let n=l.createEl("input",{type:"text",placeholder:"Optional commit message (default: latest site version)"});n.style.width="100%",n.style.marginBottom="10px";let c=l.createEl("button",{text:"Push to GitHub"}),u=l.createEl("div",{cls:"krems-feedback",attr:{style:"margin-top: 10px;"}}),i=(o,b)=>{u.textContent=o,u.className=`krems-feedback krems-feedback-${b}`};c.addEventListener("click",async()=>{let{localMarkdownPath:o,githubRepoUrl:b,gitAuthorName:w,gitAuthorEmail:y,gitPassword:m}=this.plugin.settings;if(!o||!b){i("Error: Local Markdown Directory and GitHub Repo URL must be set in plugin settings.","error");return}let E=this.app.vault.adapter.getBasePath(),f=M.join(E,o),A=(n.value.trim()||"latest site version").replace(/"/g,'\\"');c.disabled=!0,n.disabled=!0,i("Preparing to push site...","status");try{let r;i("Adding files (git add .)...","status"),r=await this.plugin.execShellCommand("git add .",f),r.stderr&&i(`Git add (warnings): ${r.stderr}`,"status"),i(`Committing with message: "${A}"...`,"status");let v=w||"Krems Obsidian Plugin",$=y||"krems-plugin@example.com",N={GIT_AUTHOR_NAME:v,GIT_AUTHOR_EMAIL:$,GIT_COMMITTER_NAME:v,GIT_COMMITTER_EMAIL:$};try{r=await this.plugin.execShellCommand(`git commit -m "${A}"`,f,N),r.stderr&&i(`Git commit (warnings): ${r.stderr}`,"status")}catch(P){if(P.stdout&&P.stdout.includes("nothing to commit"))i("No changes to commit. Proceeding to push...","status");else throw P}i("Pushing to remote repository...","status");let D="git push",G="git push";if(m&&b.startsWith("https://")){let P=b.substring(8),I=`https://${m}@${P}`,R="main";try{r=await this.plugin.execShellCommand("git rev-parse --abbrev-ref HEAD",f),R=r.stdout,r.stderr&&i(`Git branch check (warnings): ${r.stderr}`,"status")}catch(T){console.warn("Could not determine current branch, defaulting to 'main'. Error:",T.message),i(`Warning: Could not determine current branch (using 'main'). Details: ${T.stderr||T.message}`,"status")}D=`git push ${I} ${R}`,G=`git push <authenticated_url> ${R}`,i(`Pushing to ${b} (authenticated)...`,"status")}else i(`Pushing to ${b} (unauthenticated, ensure credential helper or SSH is set up)...`,"status");r=await this.plugin.execShellCommand(D,f,void 0,G),r.stderr?i(`Push successful with warnings: ${r.stderr}`,"success"):i("Site pushed successfully!","success")}catch(r){console.error("Push error:",r.message||r);let v=`Push failed: ${r.message||r.toString()}${r.stderr?`
Stderr: ${r.stderr}`:""}`;i(v,"error")}finally{c.disabled=!1,n.disabled=!1}}),(!this.plugin.settings.localMarkdownPath||!this.plugin.settings.githubRepoUrl)&&(c.disabled=!0,n.disabled=!0,l.createEl("p",{text:"Please set Local Markdown Directory and GitHub Repo URL in settings.",cls:"krems-warning"})),t.createEl("hr");let k=t.createEl("p",{cls:"krems-modal-footer"});k.setText("For help, see the "),k.createEl("a",{text:"plugin documentation",href:"https://github.com/mreider/krems-obsidian-plugin/",attr:{target:"_blank",rel:"noopener noreferrer"}}),k.appendText(".")}onClose(){let{contentEl:t}=this;t.empty()}},L=class extends p.PluginSettingTab{constructor(t,a){super(t,a);this.plugin=a}display(){let{containerEl:t}=this;t.empty(),t.createEl("h2",{text:"Krems Publisher Settings"});let a=(e,s,l,n)=>{e.classList.remove("krems-input-valid","krems-input-invalid"),s.classList.remove("krems-feedback-valid","krems-feedback-invalid"),s.textContent=l,s.style.display=l?"block":"none",l&&(e.classList.add(n?"krems-input-valid":"krems-input-invalid"),s.classList.add(n?"krems-feedback-valid":"krems-feedback-invalid"))};new p.Setting(t).setName("GitHub Repository URL").setDesc("HTTPS URL of your GitHub repository (e.g., https://github.com/username/repo). Do not include .git at the end.").addText(e=>{var l;let s=(l=e.inputEl.parentElement)==null?void 0:l.createEl("div",{cls:"krems-setting-feedback",attr:{style:"display: none; margin-top: 5px;"}});e.setPlaceholder("https://github.com/username/repo").setValue(this.plugin.settings.githubRepoUrl).onChange(async n=>{this.plugin.settings.githubRepoUrl=n.trim(),await this.plugin.saveSettings()}),e.inputEl.addEventListener("focusout",async()=>{let n=this.plugin.settings.githubRepoUrl,c=!0,u="";if(!n){a(e.inputEl,s,"",!0);return}if(!n.startsWith("https://github.com/"))c=!1,u="URL must start with https://github.com/";else if(n.endsWith(".git"))c=!1,u="URL should not end with .git";else{let i=n.substring(19).split("/");(i.length<2||!i[0]||!i[1])&&(c=!1,u="Invalid GitHub repository URL format.")}c&&u===""&&(u="URL format is valid."),a(e.inputEl,s,u,c)}),this.plugin.settings.githubRepoUrl&&e.inputEl.dispatchEvent(new Event("focusout"))}),new p.Setting(t).setName("Local Markdown Directory").setDesc("Path to the directory in your vault for your Krems site (e.g., MyKremsSite).").addText(e=>{var l;let s=(l=e.inputEl.parentElement)==null?void 0:l.createEl("div",{cls:"krems-setting-feedback",attr:{style:"display: none; margin-top: 5px;"}});e.setPlaceholder("e.g., MyKremsSite or path/to/site").setValue(this.plugin.settings.localMarkdownPath).onChange(async n=>{this.plugin.settings.localMarkdownPath=n.trim(),await this.plugin.saveSettings()}),e.inputEl.addEventListener("focusout",async()=>{let n=this.plugin.settings.localMarkdownPath,c=!1,u="";if(!n){a(e.inputEl,s,"",!0);return}let i=this.app.vault.getAbstractFileByPath(n);i&&i instanceof p.TFolder?(c=!0,u="Directory exists."):(c=!1,u="Directory not found in the vault."),a(e.inputEl,s,u,c)}),this.plugin.settings.localMarkdownPath&&e.inputEl.dispatchEvent(new Event("focusout"))}),new p.Setting(t).setName("GitHub Personal Access Token (PAT)").setDesc('Required for pushing to HTTPS repositories. Create a PAT on GitHub with "repo" and "workflow" scopes. See plugin README for instructions.').addText(e=>{e.inputEl.type="password",e.setPlaceholder("Enter your GitHub PAT").setValue(this.plugin.settings.gitPassword||"").onChange(async s=>{this.plugin.settings.gitPassword=s,await this.plugin.saveSettings()})}),new p.Setting(t).setName("Git Author Name").setDesc('Name to use for Git commits (e.g., Your Name). If blank, a default ("Krems Obsidian Plugin") will be used.').addText(e=>e.setPlaceholder("Your Name").setValue(this.plugin.settings.gitAuthorName||"").onChange(async s=>{this.plugin.settings.gitAuthorName=s.trim(),await this.plugin.saveSettings()})),new p.Setting(t).setName("Git Author Email").setDesc('Email to use for Git commits (e.g., your.email@example.com). If blank, a default ("krems-plugin@example.com") will be used.').addText(e=>e.setPlaceholder("your.email@example.com").setValue(this.plugin.settings.gitAuthorEmail||"").onChange(async s=>{this.plugin.settings.gitAuthorEmail=s.trim(),await this.plugin.saveSettings()})),t.createEl("hr");let g=t.createEl("p",{cls:"krems-settings-footer"});g.setText("For plugin instructions, troubleshooting, and more information, please visit the "),g.createEl("a",{text:"plugin documentation on GitHub",href:"https://github.com/mreider/krems-obsidian-plugin/",attr:{target:"_blank",rel:"noopener noreferrer"}}),g.appendText(".")}};
