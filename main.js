/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var I=Object.create;var v=Object.defineProperty;var O=Object.getOwnPropertyDescriptor;var K=Object.getOwnPropertyNames;var F=Object.getPrototypeOf,_=Object.prototype.hasOwnProperty;var B=(l,h)=>{for(var t in h)v(l,t,{get:h[t],enumerable:!0})},G=(l,h,t,a)=>{if(h&&typeof h=="object"||typeof h=="function")for(let c of K(h))!_.call(l,c)&&c!==t&&v(l,c,{get:()=>h[c],enumerable:!(a=O(h,c))||a.enumerable});return l};var z=(l,h,t)=>(t=l!=null?I(F(l)):{},G(h||!l||!l.__esModule?v(t,"default",{value:l,enumerable:!0}):t,l)),V=l=>G(v({},"__esModule",{value:!0}),l);var j={};B(j,{default:()=>M});module.exports=V(j);var m=require("obsidian"),x=z(require("path")),U=require("child_process"),W={githubRepoUrl:"",localMarkdownPath:"",gitPassword:"",gitAuthorName:"",gitAuthorEmail:""},M=class extends m.Plugin{async onload(){await this.loadSettings(),this.addRibbonIcon("cloud-lightning","Krems Publisher",t=>{new T(this.app,this).open()}),this.addSettingTab(new L(this.app,this)),console.log("Krems Obsidian Plugin loaded.")}onunload(){console.log("Krems Obsidian Plugin unloaded.")}async loadSettings(){this.settings=Object.assign({},W,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}async execShellCommand(t,a,c){return new Promise((s,i)=>{let o=c?{...process.env,...c}:process.env;(0,U.exec)(t,{cwd:a,env:o},(r,u,d)=>{let e={stdout:u.trim(),stderr:d.trim()};if(r){console.error(`Command failed: ${t}
Error: ${r.message}
Stdout: ${e.stdout}
Stderr: ${e.stderr}`),i({message:`Command failed: ${t}. Error: ${r.message}`,stdout:e.stdout,stderr:e.stderr,originalError:r});return}e.stderr&&console.warn(`Command successful but stderr present: ${t}
Stderr: ${e.stderr}`),s(e)})})}},T=class extends m.Modal{constructor(t,a){super(t);this.plugin=a}onOpen(){let{contentEl:t}=this;t.empty(),t.createEl("h2",{text:"Krems Publisher Actions"});let a=t.createDiv({cls:"krems-modal-section"});a.createEl("h4",{text:"1. Initialize Local Directory"}),a.createEl("p",{text:`This will clone krems-example into your specified local directory (${this.plugin.settings.localMarkdownPath||"not set"}) and set its remote to your GitHub repo.`});let c=a.createEl("button",{text:"Initialize Directory"}),s=a.createEl("div",{cls:"krems-feedback",attr:{style:"margin-top: 10px;"}}),i=(b,p)=>{s.textContent=b,s.className=`krems-feedback krems-feedback-${p}`};c.addEventListener("click",async()=>{let{localMarkdownPath:b,githubRepoUrl:p}=this.plugin.settings;if(!b||!p){i("Error: Local Markdown Directory and GitHub Repo URL must be set in plugin settings.","error");return}let k=this.app.vault.adapter.getBasePath(),y=x.join(k,b);try{let g=this.app.vault.adapter;if(await g.exists(y)){let E=await g.stat(y);if(E&&E.type==="folder"){let f=await g.list(y);if(f.files.length>0||f.folders.length>0){i(`Error: Directory '${b}' already exists and is not empty. Please choose an empty or new directory.`,"error");return}}else if(E){i(`Error: Path '${b}' exists but is not a directory.`,"error");return}}}catch(g){console.log("Directory check for init (error likely means dir doesn't exist, which is OK for clone):",g)}c.disabled=!0,i("Cloning krems-example repository...","status");try{let g=`git clone https://github.com/mreider/krems-example "${y}"`;await this.plugin.execShellCommand(g,k),i("Repository cloned. Setting remote URL...","status");let E=`git -C "${y}" remote set-url origin "${p}"`;await this.plugin.execShellCommand(E,k),i("Remote URL set. Cleaning up README.md...","status");let f=x.join(y,"README.md");await this.app.vault.adapter.exists(f)?(await this.app.vault.adapter.remove(f),i("Directory initialized successfully! README.md removed.","success")):i("Directory initialized successfully! (README.md not found to remove).","success")}catch(g){console.error("Initialization error:",g);let E=g.stderr||g.message||g.toString();i(`Initialization failed: ${E}`,"error")}finally{c.disabled=!1}}),(!this.plugin.settings.localMarkdownPath||!this.plugin.settings.githubRepoUrl)&&(c.disabled=!0,a.createEl("p",{text:"Please set Local Markdown Directory and GitHub Repo URL in settings.",cls:"krems-warning"}));let o=t.createDiv({cls:"krems-modal-section"});o.createEl("h4",{text:"2. Push Site to GitHub"}),o.createEl("p",{text:`This will add, commit, and push the content of '${this.plugin.settings.localMarkdownPath||"not set"}' to your GitHub repo.`});let r=o.createEl("input",{type:"text",placeholder:"Optional commit message (default: latest site version)"});r.style.width="100%",r.style.marginBottom="10px";let u=o.createEl("button",{text:"Push to GitHub"}),d=o.createEl("div",{cls:"krems-feedback",attr:{style:"margin-top: 10px;"}}),e=(b,p)=>{d.textContent=b,d.className=`krems-feedback krems-feedback-${p}`};u.addEventListener("click",async()=>{let{localMarkdownPath:b,githubRepoUrl:p,gitAuthorName:k,gitAuthorEmail:y,gitPassword:g}=this.plugin.settings;if(!b||!p){e("Error: Local Markdown Directory and GitHub Repo URL must be set in plugin settings.","error");return}let E=this.app.vault.adapter.getBasePath(),f=x.join(E,b),A=(r.value.trim()||"latest site version").replace(/"/g,'\\"');u.disabled=!0,r.disabled=!0,e("Preparing to push site...","status");try{let n;e("Adding files (git add .)...","status"),n=await this.plugin.execShellCommand("git add .",f),n.stderr&&e(`Git add warning: ${n.stderr}`,"status"),e(`Committing with message: "${A}"...`,"status");let P=k||"Krems Obsidian Plugin",C=y||"krems-plugin@example.com",H={GIT_AUTHOR_NAME:P,GIT_AUTHOR_EMAIL:C,GIT_COMMITTER_NAME:P,GIT_COMMITTER_EMAIL:C};try{n=await this.plugin.execShellCommand(`git commit -m "${A}"`,f,H),n.stderr&&e(`Git commit warning: ${n.stderr}`,"status")}catch(w){if(w.stderr&&w.stderr.includes("nothing to commit"))e("No changes to commit. Proceeding to push...","status");else throw w}e("Pushing to remote repository...","status");let $="git push";if(g&&p.startsWith("https://")){let w=p.substring(8),N=`https://${g}@${w}`,D="main";try{n=await this.plugin.execShellCommand("git rev-parse --abbrev-ref HEAD",f),D=n.stdout,n.stderr&&e(`Git branch warning: ${n.stderr}`,"status")}catch(R){console.warn("Could not determine current branch, defaulting to 'main'. Error:",R.message),e(`Warning: Could not determine current branch (using 'main'). Details: ${R.stderr||R.message}`,"status")}$=`git push ${N} ${D}`,e(`Pushing to ${p} (authenticated)...`,"status")}else e(`Pushing to ${p} (unauthenticated, ensure credential helper or SSH is set up)...`,"status");n=await this.plugin.execShellCommand($,f),n.stderr?e(`Push successful with warnings: ${n.stderr}`,"success"):e("Site pushed successfully!","success")}catch(n){console.error("Push error:",n);let P=`Push failed: ${n.message||n.toString()}${n.stderr?`
Stderr: ${n.stderr}`:""}`;e(P,"error")}finally{u.disabled=!1,r.disabled=!1}}),(!this.plugin.settings.localMarkdownPath||!this.plugin.settings.githubRepoUrl)&&(u.disabled=!0,r.disabled=!0,o.createEl("p",{text:"Please set Local Markdown Directory and GitHub Repo URL in settings.",cls:"krems-warning"})),t.createEl("hr");let S=t.createEl("p",{cls:"krems-modal-footer"});S.setText("For help, see the "),S.createEl("a",{text:"plugin documentation",href:"https://github.com/mreider/krems-obsidian-plugin/",attr:{target:"_blank",rel:"noopener noreferrer"}}),S.appendText(".")}onClose(){let{contentEl:t}=this;t.empty()}},L=class extends m.PluginSettingTab{constructor(t,a){super(t,a);this.plugin=a}display(){let{containerEl:t}=this;t.empty(),t.createEl("h2",{text:"Krems Publisher Settings"});let a=(s,i,o,r)=>{s.classList.remove("krems-input-valid","krems-input-invalid"),i.classList.remove("krems-feedback-valid","krems-feedback-invalid"),i.textContent=o,i.style.display=o?"block":"none",o&&(s.classList.add(r?"krems-input-valid":"krems-input-invalid"),i.classList.add(r?"krems-feedback-valid":"krems-feedback-invalid"))};new m.Setting(t).setName("GitHub Repository URL").setDesc("HTTPS URL of your GitHub repository (e.g., https://github.com/username/repo). Do not include .git at the end.").addText(s=>{var o;let i=(o=s.inputEl.parentElement)==null?void 0:o.createEl("div",{cls:"krems-setting-feedback",attr:{style:"display: none; margin-top: 5px;"}});s.setPlaceholder("https://github.com/username/repo").setValue(this.plugin.settings.githubRepoUrl).onChange(async r=>{this.plugin.settings.githubRepoUrl=r.trim(),await this.plugin.saveSettings()}),s.inputEl.addEventListener("focusout",async()=>{let r=this.plugin.settings.githubRepoUrl,u=!0,d="";if(!r){a(s.inputEl,i,"",!0);return}if(!r.startsWith("https://github.com/"))u=!1,d="URL must start with https://github.com/";else if(r.endsWith(".git"))u=!1,d="URL should not end with .git";else{let e=r.substring(19).split("/");(e.length<2||!e[0]||!e[1])&&(u=!1,d="Invalid GitHub repository URL format.")}u&&d===""&&(d="URL format is valid."),a(s.inputEl,i,d,u)}),this.plugin.settings.githubRepoUrl&&s.inputEl.dispatchEvent(new Event("focusout"))}),new m.Setting(t).setName("Local Markdown Directory").setDesc("Path to the directory in your vault for your Krems site (e.g., MyKremsSite).").addText(s=>{var o;let i=(o=s.inputEl.parentElement)==null?void 0:o.createEl("div",{cls:"krems-setting-feedback",attr:{style:"display: none; margin-top: 5px;"}});s.setPlaceholder("e.g., MyKremsSite or path/to/site").setValue(this.plugin.settings.localMarkdownPath).onChange(async r=>{this.plugin.settings.localMarkdownPath=r.trim(),await this.plugin.saveSettings()}),s.inputEl.addEventListener("focusout",async()=>{let r=this.plugin.settings.localMarkdownPath,u=!1,d="";if(!r){a(s.inputEl,i,"",!0);return}let e=this.app.vault.getAbstractFileByPath(r);e&&e instanceof m.TFolder?(u=!0,d="Directory exists."):(u=!1,d="Directory not found in the vault."),a(s.inputEl,i,d,u)}),this.plugin.settings.localMarkdownPath&&s.inputEl.dispatchEvent(new Event("focusout"))}),new m.Setting(t).setName("GitHub Personal Access Token (PAT)").setDesc('Required for pushing to HTTPS repositories. Create a PAT on GitHub with "repo" scope. See plugin README for instructions.').addText(s=>{s.inputEl.type="password",s.setPlaceholder("Enter your GitHub PAT").setValue(this.plugin.settings.gitPassword||"").onChange(async i=>{this.plugin.settings.gitPassword=i,await this.plugin.saveSettings()})}),new m.Setting(t).setName("Git Author Name").setDesc('Name to use for Git commits (e.g., Your Name). If blank, a default ("Krems Obsidian Plugin") will be used.').addText(s=>s.setPlaceholder("Your Name").setValue(this.plugin.settings.gitAuthorName||"").onChange(async i=>{this.plugin.settings.gitAuthorName=i.trim(),await this.plugin.saveSettings()})),new m.Setting(t).setName("Git Author Email").setDesc('Email to use for Git commits (e.g., your.email@example.com). If blank, a default ("krems-plugin@example.com") will be used.').addText(s=>s.setPlaceholder("your.email@example.com").setValue(this.plugin.settings.gitAuthorEmail||"").onChange(async i=>{this.plugin.settings.gitAuthorEmail=i.trim(),await this.plugin.saveSettings()})),t.createEl("hr");let c=t.createEl("p",{cls:"krems-settings-footer"});c.setText("For plugin instructions, troubleshooting, and more information, please visit the "),c.createEl("a",{text:"plugin documentation on GitHub",href:"https://github.com/mreider/krems-obsidian-plugin/",attr:{target:"_blank",rel:"noopener noreferrer"}}),c.appendText(".")}};
