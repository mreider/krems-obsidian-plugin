/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var J=Object.create;var M=Object.defineProperty;var Y=Object.getOwnPropertyDescriptor;var Q=Object.getOwnPropertyNames;var X=Object.getPrototypeOf,Z=Object.prototype.hasOwnProperty;var tt=(p,b)=>{for(var t in b)M(p,t,{get:b[t],enumerable:!0})},j=(p,b,t,i)=>{if(b&&typeof b=="object"||typeof b=="function")for(let u of Q(b))!Z.call(p,u)&&u!==t&&M(p,u,{get:()=>b[u],enumerable:!(i=Y(b,u))||i.enumerable});return p};var z=(p,b,t)=>(t=p!=null?J(X(p)):{},j(b||!p||!p.__esModule?M(t,"default",{value:p,enumerable:!0}):t,p)),et=p=>j(M({},"__esModule",{value:!0}),p);var st={};tt(st,{default:()=>T});module.exports=et(st);var h=require("obsidian"),L=z(require("path")),N=z(require("fs")),$=require("child_process"),V={githubRepoUrl:"",localMarkdownPath:"",gitPassword:"",gitAuthorName:"",gitAuthorEmail:"",localRunPort:"8080",localKremsBinaryPath:""},T=class extends h.Plugin{constructor(){super(...arguments);this.isKremsLocallyRunning=!1;this.localKremsProcess=null}async onload(){await this.loadSettings(),this.addRibbonIcon("cloud-lightning","Krems Publisher",t=>{new I(this.app,this).open()}),this.addSettingTab(new G(this.app,this)),console.log("Krems Obsidian Plugin loaded.")}onunload(){this.localKremsProcess&&(console.log("Krems Obsidian Plugin unloading: Killing active Krems process."),this.localKremsProcess.kill(),this.localKremsProcess=null,this.isKremsLocallyRunning=!1),console.log("Krems Obsidian Plugin unloaded.")}async loadSettings(){this.settings=Object.assign({},V,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}async execShellCommand(t,i,u,e){return new Promise((s,n)=>{let r=u?{...process.env,...u}:process.env,o=e||t;(0,$.exec)(t,{cwd:i,env:r},(m,a,K)=>{let w={stdout:a.trim(),stderr:K.trim()};if(m){console.error(`Command failed: ${o}
Error: ${m.message}
Stdout: ${w.stdout}
Stderr: ${w.stderr}`),n({message:`Command failed: ${o}. Error: ${m.message}`,stdout:w.stdout,stderr:w.stderr,originalError:m});return}w.stderr&&console.warn(`Command successful but stderr present: ${o}
Stderr: ${w.stderr}`),s(w)})})}getKremsBinaryDir(){return L.join(this.app.vault.configDir,"plugins",this.manifest.id,"bin")}getKremsBinaryName(){switch(process.platform){case"win32":return"krems-windows-amd64.exe";case"darwin":return"krems-darwin-amd64";case"linux":return"krems-linux-amd64";default:return""}}async ensureKremsBinary(t){let i=this.getKremsBinaryName();if(!i)return t("Unsupported operating system for Krems download.","error"),null;let u=this.getKremsBinaryDir(),e=L.join(u,i);this.settings.localKremsBinaryPath=e,await this.saveSettings();let s=this.app.vault.adapter;try{if(await s.exists(e)){if(t("Krems binary already downloaded.","status"),process.platform!=="win32")try{N.chmodSync(e,493)}catch(n){return console.error("Failed to chmod existing binary:",n),t("Found Krems binary, but failed to set executable permission. Please check manually.","error"),null}return e}}catch(n){console.error("Error checking for existing Krems binary:",n),t("Error checking for existing Krems binary. Attempting download.","error")}t(`Downloading Krems for ${process.platform}...`,"status");try{await s.exists(u)||await s.mkdir(u);let n=`https://github.com/mreider/krems/releases/latest/download/${i}`,r=await(0,h.requestUrl)({url:n,method:"GET"});if(r.status!==200)throw new Error(`Failed to download Krems: Server responded with ${r.status}`);return await s.writeBinary(e,r.arrayBuffer),t("Krems downloaded successfully.","status"),process.platform!=="win32"&&(t("Setting executable permissions...","status"),N.chmodSync(e,493),t("Permissions set.","status")),e}catch(n){return console.error("Krems download error:",n),t(`Failed to download Krems: ${n.message||n.toString()}`,"error"),null}}},I=class extends h.Modal{constructor(t,i){super(t);this.plugin=i}async checkIfDirIsEmpty(t){try{let i=this.app.vault.adapter;if(await i.exists(t)){let u=await i.stat(t);if(u&&u.type==="folder"){let e=await i.list(t);return e.files.length===0&&e.folders.length===0}}return!1}catch(i){return console.warn("Error checking if dir is empty:",i),!1}}async onOpen(){let{contentEl:t}=this;t.empty(),t.createEl("h2",{text:"Krems Publisher Actions"});let i=t.createDiv({cls:"krems-modal-section"});i.createEl("h4",{text:"1. Initialize Local Directory"});let u=i.createEl("p",{text:`This will clone krems-example into your specified local directory (${this.plugin.settings.localMarkdownPath||"not set"}) and set its remote to your GitHub repo.`});this.initButton=i.createEl("button",{text:"Initialize Directory"}),this.initFeedbackEl=i.createEl("div",{cls:"krems-feedback",attr:{style:"margin-top: 10px;"}});let e=i.createEl("p",{cls:"krems-warning",attr:{style:"display: none;"}}),s=(l,c)=>{this.initFeedbackEl.textContent=l,this.initFeedbackEl.className=`krems-feedback krems-feedback-${c}`},n=this.plugin.settings.localMarkdownPath;if(!n||!this.plugin.settings.githubRepoUrl)this.initButton.disabled=!0,e.textContent="Please set Local Markdown Directory and GitHub Repo URL in settings.",e.style.display="block";else{let l=this.app.vault.adapter.getBasePath(),c=L.join(l,n);this.checkIfDirIsEmpty(c).then(P=>{this.app.vault.adapter.exists(c).then(async E=>{E&&!P?(this.initButton.disabled=!0,e.textContent=`Directory '${n}' is not empty. Initialization disabled.`,e.style.display="block"):(e.style.display="none",this.initButton.disabled=!1)})})}this.initButton.addEventListener("click",async()=>{let{localMarkdownPath:l,githubRepoUrl:c}=this.plugin.settings;if(!l||!c){s("Error: Local Markdown Directory and GitHub Repo URL must be set in plugin settings.","error");return}let P=this.app.vault.adapter.getBasePath(),E=L.join(P,l);if(await this.app.vault.adapter.exists(E)&&!await this.checkIfDirIsEmpty(E)){s(`Error: Directory '${l}' is not empty. Please choose an empty or new directory.`,"error");return}this.initButton.disabled=!0,s("Cloning krems-example repository...","status");try{let g=`git clone https://github.com/mreider/krems-example "${E}"`;await this.plugin.execShellCommand(g,P,void 0,"git clone <example-repo> <path>"),s("Repository cloned. Setting remote URL...","status");let k=`git -C "${E}" remote set-url origin "${c}"`;await this.plugin.execShellCommand(k,P,void 0,"git remote set-url origin <user-repo-url>"),s("Remote URL set. Cleaning up README.md...","status");let v=L.join(E,"README.md");await this.app.vault.adapter.exists(v)?(await this.app.vault.adapter.remove(v),s("Directory initialized successfully! README.md removed.","success")):s("Directory initialized successfully! (README.md not found to remove).","success")}catch(g){console.error("Initialization error:",g.message||g);let k=g.stderr||g.message||g.toString();s(`Initialization failed: ${k}`,"error")}finally{this.initButton.disabled=!1}});let r=t.createDiv({cls:"krems-modal-section"});r.createEl("h4",{text:"2. Preview Site Locally"}),this.browseLocallyButton=r.createEl("button",{text:"Browse Locally"}),this.stopKremsButton=r.createEl("button",{text:"Stop Local Server"});let o=r.createEl("div",{cls:"krems-feedback",attr:{style:"margin-top: 10px; white-space: pre-wrap; background-color: var(--background-secondary); padding: 5px; border-radius: 3px; max-height: 150px; overflow-y: auto;"}}),m=r.createEl("p",{cls:"krems-warning",attr:{style:"display: none;"}}),a=(l,c)=>{c==="log"?(o.textContent+=l+`
`,o.scrollTop=o.scrollHeight):o.textContent=l,o.className=`krems-feedback krems-feedback-${c}`},K=()=>{this.plugin.isKremsLocallyRunning?(this.browseLocallyButton.setText("Server Running"),this.browseLocallyButton.disabled=!0,this.stopKremsButton.disabled=!1):(this.browseLocallyButton.setText("Browse Locally"),this.browseLocallyButton.disabled=!1,this.stopKremsButton.disabled=!0);let{localMarkdownPath:l}=this.plugin.settings;l?m.style.display="none":(this.browseLocallyButton.disabled=!0,this.stopKremsButton.disabled=!0,m.textContent="Please set Local Markdown Directory in settings.",m.style.display="block")};K(),this.browseLocallyButton.addEventListener("click",async()=>{var v,D;let{localMarkdownPath:l,localRunPort:c}=this.plugin.settings;if(!l){a("Error: Local Markdown Directory must be set.","error");return}this.browseLocallyButton.disabled=!0,a("Preparing local preview...","status");let P=await this.plugin.ensureKremsBinary(a);if(!P){K();return}let E=this.app.vault.adapter.getBasePath(),g=L.join(E,l),k=c||V.localRunPort||"8080";a(`Starting Krems server on port ${k}...`,"status");try{this.plugin.localKremsProcess=(0,$.spawn)(P,["--run","--port",k],{cwd:g,shell:process.platform==="win32"}),this.plugin.isKremsLocallyRunning=!0,K(),a(`Krems server starting on port ${k}. Output:
`,"log"),setTimeout(()=>{window.open(`http://localhost:${k}`,"_blank")},1500),(v=this.plugin.localKremsProcess.stdout)==null||v.on("data",y=>{a(y.toString(),"log")}),(D=this.plugin.localKremsProcess.stderr)==null||D.on("data",y=>{a(`[STDERR] ${y.toString()}`,"log")}),this.plugin.localKremsProcess.on("error",y=>{console.error("Failed to start Krems process:",y),a(`Failed to start Krems: ${y.message}`,"error"),this.plugin.isKremsLocallyRunning=!1,this.plugin.localKremsProcess=null,K()}),this.plugin.localKremsProcess.on("close",y=>{a(`Krems server exited with code ${y}.`,y===0?"status":"error"),this.plugin.isKremsLocallyRunning=!1,this.plugin.localKremsProcess=null,K()})}catch(y){console.error("Error spawning Krems:",y),a(`Error starting Krems: ${y.message||y.toString()}`,"error"),this.plugin.isKremsLocallyRunning=!1,this.plugin.localKremsProcess=null,K()}}),this.stopKremsButton.addEventListener("click",async()=>{this.plugin.localKremsProcess?(a("Stopping Krems server...","status"),this.plugin.localKremsProcess.kill()):(a("Krems server is not running.","status"),this.plugin.isKremsLocallyRunning=!1,K());let l=this.plugin.settings.localKremsBinaryPath,{localMarkdownPath:c}=this.plugin.settings;if(l&&c){let P=this.app.vault.adapter.getBasePath(),E=L.join(P,c);a("Cleaning up .tmp directory...","status");try{await this.plugin.execShellCommand(`"${l}" --clean`,E,void 0,"krems --clean"),a("Cleanup successful.","status")}catch(g){console.error("Krems clean error:",g),a(`Cleanup failed: ${g.stderr||g.message}`,"error")}}});let w=t.createDiv({cls:"krems-modal-section"});w.createEl("h4",{text:"3. Push Site to GitHub"}),w.createEl("p",{text:`This will add, commit, and push the content of '${this.plugin.settings.localMarkdownPath||"not set"}' to your GitHub repo.`});let x=w.createEl("input",{type:"text",placeholder:"Optional commit message (default: latest site version)"});x.style.width="100%",x.style.marginBottom="10px";let R=w.createEl("button",{text:"Push to GitHub"}),F=w.createEl("div",{cls:"krems-feedback",attr:{style:"margin-top: 10px;"}}),f=(l,c)=>{F.textContent=l,F.className=`krems-feedback krems-feedback-${c}`};R.addEventListener("click",async()=>{let{localMarkdownPath:l,githubRepoUrl:c,gitAuthorName:P,gitAuthorEmail:E,gitPassword:g}=this.plugin.settings;if(!l||!c){f("Error: Local Markdown Directory and GitHub Repo URL must be set in plugin settings.","error");return}let k=this.app.vault.adapter.getBasePath(),v=L.join(k,l),y=(x.value.trim()||"latest site version").replace(/"/g,'\\"');R.disabled=!0,x.disabled=!0,f("Preparing to push site...","status");try{let d;f("Adding files (git add .)...","status"),d=await this.plugin.execShellCommand("git add .",v),d.stderr&&f(`Git add (warnings): ${d.stderr}`,"status"),f(`Committing with message: "${y}"...`,"status");let B=P||"Krems Obsidian Plugin",U=E||"krems-plugin@example.com",W={GIT_AUTHOR_NAME:B,GIT_AUTHOR_EMAIL:U,GIT_COMMITTER_NAME:B,GIT_COMMITTER_EMAIL:U};try{d=await this.plugin.execShellCommand(`git commit -m "${y}"`,v,W),d.stderr&&f(`Git commit (warnings): ${d.stderr}`,"status")}catch(S){if(S.stdout&&S.stdout.includes("nothing to commit"))f("No changes to commit. Proceeding to push...","status");else throw S}f("Pushing to remote repository...","status");let O="git push",_="git push";if(g&&c.startsWith("https://")){let S=c.substring(8),q=`https://${g}@${S}`,A="main";try{d=await this.plugin.execShellCommand("git rev-parse --abbrev-ref HEAD",v),A=d.stdout,d.stderr&&f(`Git branch check (warnings): ${d.stderr}`,"status")}catch(H){console.warn("Could not determine current branch, defaulting to 'main'. Error:",H.message),f(`Warning: Could not determine current branch (using 'main'). Details: ${H.stderr||H.message}`,"status")}O=`git push ${q} ${A}`,_=`git push <authenticated_url> ${A}`,f(`Pushing to ${c} (authenticated)...`,"status")}else f(`Pushing to ${c} (unauthenticated, ensure credential helper or SSH is set up)...`,"status");d=await this.plugin.execShellCommand(O,v,void 0,_),d.stderr?f(`Push successful with warnings: ${d.stderr}`,"success"):f("Site pushed successfully!","success")}catch(d){console.error("Push error:",d.message||d);let B=`Push failed: ${d.message||d.toString()}${d.stderr?`
Stderr: ${d.stderr}`:""}`;f(B,"error")}finally{R.disabled=!1,x.disabled=!1}}),(!this.plugin.settings.localMarkdownPath||!this.plugin.settings.githubRepoUrl)&&(R.disabled=!0,x.disabled=!0,w.createEl("p",{text:"Please set Local Markdown Directory and GitHub Repo URL in settings.",cls:"krems-warning"})),t.createEl("hr");let C=t.createEl("p",{cls:"krems-modal-footer"});C.setText("For help, see the "),C.createEl("a",{text:"plugin documentation",href:"https://github.com/mreider/krems-obsidian-plugin/",attr:{target:"_blank",rel:"noopener noreferrer"}}),C.appendText(".")}onClose(){let{contentEl:t}=this;t.empty()}},G=class extends h.PluginSettingTab{constructor(t,i){super(t,i);this.plugin=i}display(){let{containerEl:t}=this;t.empty(),t.createEl("h2",{text:"Krems Publisher Settings"});let i=(e,s,n,r)=>{e.classList.remove("krems-input-valid","krems-input-invalid"),s.classList.remove("krems-feedback-valid","krems-feedback-invalid"),s.textContent=n,s.style.display=n?"block":"none",n&&(e.classList.add(r?"krems-input-valid":"krems-input-invalid"),s.classList.add(r?"krems-feedback-valid":"krems-feedback-invalid"))};new h.Setting(t).setName("GitHub Repository URL").setDesc("HTTPS URL of your GitHub repository (e.g., https://github.com/username/repo). Do not include .git at the end.").addText(e=>{var n;let s=(n=e.inputEl.parentElement)==null?void 0:n.createEl("div",{cls:"krems-setting-feedback",attr:{style:"display: none; margin-top: 5px;"}});e.setPlaceholder("https://github.com/username/repo").setValue(this.plugin.settings.githubRepoUrl).onChange(async r=>{this.plugin.settings.githubRepoUrl=r.trim(),await this.plugin.saveSettings()}),e.inputEl.addEventListener("focusout",async()=>{let r=this.plugin.settings.githubRepoUrl,o=!0,m="";if(!r){i(e.inputEl,s,"",!0);return}if(!r.startsWith("https://github.com/"))o=!1,m="URL must start with https://github.com/";else if(r.endsWith(".git"))o=!1,m="URL should not end with .git";else{let a=r.substring(19).split("/");(a.length<2||!a[0]||!a[1])&&(o=!1,m="Invalid GitHub repository URL format.")}o&&m===""&&(m="URL format is valid."),i(e.inputEl,s,m,o)}),this.plugin.settings.githubRepoUrl&&e.inputEl.dispatchEvent(new Event("focusout"))}),new h.Setting(t).setName("Local Markdown Directory").setDesc("Path to the directory in your vault for your Krems site (e.g., MyKremsSite).").addText(e=>{var n;let s=(n=e.inputEl.parentElement)==null?void 0:n.createEl("div",{cls:"krems-setting-feedback",attr:{style:"display: none; margin-top: 5px;"}});e.setPlaceholder("e.g., MyKremsSite or path/to/site").setValue(this.plugin.settings.localMarkdownPath).onChange(async r=>{this.plugin.settings.localMarkdownPath=r.trim(),await this.plugin.saveSettings()}),e.inputEl.addEventListener("focusout",async()=>{let r=this.plugin.settings.localMarkdownPath,o=!1,m="";if(!r){i(e.inputEl,s,"",!0);return}let a=this.app.vault.getAbstractFileByPath(r);a&&a instanceof h.TFolder?(o=!0,m="Directory exists."):(o=!1,m="Directory not found in the vault."),i(e.inputEl,s,m,o)}),this.plugin.settings.localMarkdownPath&&e.inputEl.dispatchEvent(new Event("focusout"))}),new h.Setting(t).setName("GitHub Personal Access Token (PAT)").setDesc('Required for pushing to HTTPS repositories. Create a PAT on GitHub with "repo" and "workflow" scopes. See plugin README for instructions.').addText(e=>{e.inputEl.type="password",e.setPlaceholder("Enter your GitHub PAT").setValue(this.plugin.settings.gitPassword||"").onChange(async s=>{this.plugin.settings.gitPassword=s,await this.plugin.saveSettings()})}),new h.Setting(t).setName("Git Author Name").setDesc('Name to use for Git commits (e.g., Your Name). If blank, a default ("Krems Obsidian Plugin") will be used.').addText(e=>e.setPlaceholder("Your Name").setValue(this.plugin.settings.gitAuthorName||"").onChange(async s=>{this.plugin.settings.gitAuthorName=s.trim(),await this.plugin.saveSettings()})),new h.Setting(t).setName("Git Author Email").setDesc('Email to use for Git commits (e.g., your.email@example.com). If blank, a default ("krems-plugin@example.com") will be used.').addText(e=>e.setPlaceholder("your.email@example.com").setValue(this.plugin.settings.gitAuthorEmail||"").onChange(async s=>{this.plugin.settings.gitAuthorEmail=s.trim(),await this.plugin.saveSettings()})),new h.Setting(t).setName("Port for Local Server (Optional)").setDesc('Port for "Browse Locally" feature. Defaults to 8080 if blank or invalid.').addText(e=>{var n;let s=(n=e.inputEl.parentElement)==null?void 0:n.createEl("div",{cls:"krems-setting-feedback",attr:{style:"display: none; margin-top: 5px;"}});e.setPlaceholder("e.g., 8080").setValue(this.plugin.settings.localRunPort||"").onChange(async r=>{this.plugin.settings.localRunPort=r.trim(),await this.plugin.saveSettings()}),e.inputEl.addEventListener("focusout",()=>{let r=this.plugin.settings.localRunPort;if(!r){i(e.inputEl,s,"Using default port 8080.",!0);return}let o=parseInt(r,10);isNaN(o)||o<1024||o>65535?i(e.inputEl,s,"Invalid port. Must be a number between 1024-65535.",!1):i(e.inputEl,s,"Port is valid.",!0)}),this.plugin.settings.localRunPort&&e.inputEl.dispatchEvent(new Event("focusout"))}),t.createEl("hr");let u=t.createEl("p",{cls:"krems-settings-footer"});u.setText("For plugin instructions, troubleshooting, and more information, please visit the "),u.createEl("a",{text:"plugin documentation on GitHub",href:"https://github.com/mreider/krems-obsidian-plugin/",attr:{target:"_blank",rel:"noopener noreferrer"}}),u.appendText(".")}};
