/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var Y=Object.create;var C=Object.defineProperty;var Q=Object.getOwnPropertyDescriptor;var X=Object.getOwnPropertyNames;var Z=Object.getPrototypeOf,tt=Object.prototype.hasOwnProperty;var et=(h,w)=>{for(var e in w)C(h,e,{get:w[e],enumerable:!0})},z=(h,w,e,r)=>{if(w&&typeof w=="object"||typeof w=="function")for(let d of X(w))!tt.call(h,d)&&d!==e&&C(h,d,{get:()=>w[d],enumerable:!(r=Q(w,d))||r.enumerable});return h};var V=(h,w,e)=>(e=h!=null?Y(Z(h)):{},z(w||!h||!h.__esModule?C(e,"default",{value:h,enumerable:!0}):e,h)),st=h=>z(C({},"__esModule",{value:!0}),h);var it={};et(it,{default:()=>$});module.exports=st(it);var g=require("obsidian"),v=V(require("path")),N=V(require("fs")),D=require("child_process"),W={githubRepoUrl:"",localMarkdownPath:"",gitPassword:"",gitAuthorName:"",gitAuthorEmail:"",localRunPort:"8080",localKremsBinaryPath:""},$=class extends g.Plugin{constructor(){super(...arguments);this.isKremsLocallyRunning=!1;this.localKremsProcess=null}async onload(){await this.loadSettings(),this.addRibbonIcon("cloud-lightning","Krems Publisher",e=>{new G(this.app,this).open()}),this.addSettingTab(new F(this.app,this)),console.log("Krems Obsidian Plugin loaded.")}onunload(){this.localKremsProcess&&(console.log("Krems Obsidian Plugin unloading: Killing active Krems process."),this.localKremsProcess.kill(),this.localKremsProcess=null,this.isKremsLocallyRunning=!1),console.log("Krems Obsidian Plugin unloaded.")}async loadSettings(){this.settings=Object.assign({},W,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}async execShellCommand(e,r,d,t){return new Promise((s,l)=>{let n=d?{...process.env,...d}:process.env,i=t||e;(0,D.exec)(e,{cwd:r,env:n},(a,E,m)=>{let y={stdout:E.trim(),stderr:m.trim()};if(a){console.error(`Command failed: ${i}
Error: ${a.message}
Stdout: ${y.stdout}
Stderr: ${y.stderr}`),l({message:`Command failed: ${i}. Error: ${a.message}`,stdout:y.stdout,stderr:y.stderr,originalError:a});return}y.stderr&&console.warn(`Command successful but stderr present: ${i}
Stderr: ${y.stderr}`),s(y)})})}getKremsBinaryDir(){return v.join(this.app.vault.configDir,"plugins",this.manifest.id,"bin")}getKremsBinaryName(){switch(process.platform){case"win32":return"krems-windows-amd64.exe";case"darwin":return"krems-darwin-amd64";case"linux":return"krems-linux-amd64";default:return""}}async ensureKremsBinary(e){let r=this.getKremsBinaryName();if(!r)return e("Unsupported operating system for Krems download.","error"),null;let d=this.getKremsBinaryDir(),t=v.join(d,r),s=this.app.vault.adapter.getBasePath(),l=v.join(s,t);this.settings.localKremsBinaryPath=t,await this.saveSettings();let n=this.app.vault.adapter;try{if(await n.exists(t)){if(e("Krems binary already downloaded.","status"),process.platform!=="win32")try{N.chmodSync(l,493)}catch(i){return console.error("Failed to chmod existing binary:",i),e("Found Krems binary, but failed to set executable permission. Please check manually.","error"),null}return t}}catch(i){console.error("Error checking for existing Krems binary:",i),e("Error checking for existing Krems binary. Attempting download.","error")}e(`Downloading Krems for ${process.platform}...`,"status");try{await n.exists(d)||await n.mkdir(d);let i=`https://github.com/mreider/krems/releases/latest/download/${r}`,a=await(0,g.requestUrl)({url:i,method:"GET"});if(a.status!==200)throw new Error(`Failed to download Krems: Server responded with ${a.status}`);return await n.writeBinary(t,a.arrayBuffer),e("Krems downloaded successfully.","status"),process.platform!=="win32"&&(e("Setting executable permissions...","status"),N.chmodSync(l,493),e("Permissions set.","status")),t}catch(i){return console.error("Krems download error:",i),e(`Failed to download Krems: ${i.message||i.toString()}`,"error"),null}}},G=class extends g.Modal{constructor(e,r){super(e);this.plugin=r}async checkIfDirIsEmpty(e){try{let d=await this.app.vault.adapter.list(e);return d.files.length===0&&d.folders.length===0}catch(r){return console.warn(`Error listing contents of '${e}':`,r),!1}}async onOpen(){let{contentEl:e}=this;e.empty(),e.createEl("h2",{text:"Krems Publisher Actions"});let r=e.createDiv({cls:"krems-modal-section"});r.createEl("h4",{text:"1. Initialize Local Directory"});let d=r.createEl("p",{text:`This will clone krems-example into your specified local directory (${this.plugin.settings.localMarkdownPath||"not set"}) and set its remote to your GitHub repo.`});this.initButton=r.createEl("button",{text:"Initialize Directory"}),this.initFeedbackEl=r.createEl("div",{cls:"krems-feedback",attr:{style:"margin-top: 10px;"}});let t=r.createEl("p",{cls:"krems-warning",attr:{style:"display: none;"}}),s=(u,o)=>{this.initFeedbackEl.textContent=u,this.initFeedbackEl.className=`krems-feedback krems-feedback-${o}`},l=this.plugin.settings.localMarkdownPath,n=!!this.plugin.settings.githubRepoUrl;!l||!n?(this.initButton.disabled=!0,t.textContent="Please set Local Markdown Directory and GitHub Repo URL in settings.",t.style.display="block"):this.app.vault.adapter.stat(l).then(async o=>{o?o.type==="folder"?await this.checkIfDirIsEmpty(l)?(t.style.display="none",this.initButton.disabled=!1):(this.initButton.disabled=!0,t.textContent=`Directory '${l}' is not empty. Can only initialize empty directories.`,t.style.display="block"):(this.initButton.disabled=!0,t.textContent=`Path '${l}' is a file, not a directory. Initialization requires a directory path.`,t.style.display="block"):(t.style.display="none",this.initButton.disabled=!1)}).catch(o=>{console.error(`Error checking path '${l}' for init button state:`,o),this.initButton.disabled=!0,t.textContent="Error checking local directory status. Initialization disabled.",t.style.display="block"}),this.initButton.addEventListener("click",async()=>{let{localMarkdownPath:u,githubRepoUrl:o}=this.plugin.settings;if(!u||!o){s("Error: Local Markdown Directory and GitHub Repo URL must be set in plugin settings.","error");return}let K=this.app.vault.adapter.getBasePath(),P=v.join(K,u);if(await this.app.vault.adapter.exists(P)&&!await this.checkIfDirIsEmpty(P)){s(`Error: Directory '${u}' is not empty. Please choose an empty or new directory.`,"error");return}this.initButton.disabled=!0,s("Cloning krems-example repository...","status");try{let b=`git clone https://github.com/mreider/krems-example "${P}"`;await this.plugin.execShellCommand(b,K,void 0,"git clone <example-repo> <path>"),s("Repository cloned. Setting remote URL...","status");let k=`git -C "${P}" remote set-url origin "${o}"`;await this.plugin.execShellCommand(k,K,void 0,"git remote set-url origin <user-repo-url>"),s("Remote URL set. Cleaning up README.md...","status");let L=v.join(P,"README.md");await this.app.vault.adapter.exists(L)?(await this.app.vault.adapter.remove(L),s("Directory initialized successfully! README.md removed.","success")):s("Directory initialized successfully! (README.md not found to remove).","success")}catch(b){console.error("Initialization error:",b.message||b);let k=b.stderr||b.message||b.toString();s(`Initialization failed: ${k}`,"error")}finally{this.initButton.disabled=!1}});let i=e.createDiv({cls:"krems-modal-section"});i.createEl("h4",{text:"2. Preview Site Locally"}),this.browseLocallyButton=i.createEl("button",{text:"Browse Locally"}),this.stopKremsButton=i.createEl("button",{text:"Stop Local Server"});let a=i.createEl("div",{cls:"krems-feedback",attr:{style:"margin-top: 10px; white-space: pre-wrap; background-color: var(--background-secondary); padding: 5px; border-radius: 3px; max-height: 150px; overflow-y: auto;"}}),E=i.createEl("p",{cls:"krems-warning",attr:{style:"display: none;"}}),m=(u,o)=>{o==="log"?(a.textContent+=u+`
`,a.scrollTop=a.scrollHeight):a.textContent=u,a.className=`krems-feedback krems-feedback-${o}`},y=()=>{this.plugin.isKremsLocallyRunning?(this.browseLocallyButton.setText("Server Running"),this.browseLocallyButton.disabled=!0,this.stopKremsButton.disabled=!1):(this.browseLocallyButton.setText("Browse Locally"),this.browseLocallyButton.disabled=!1,this.stopKremsButton.disabled=!0);let{localMarkdownPath:u}=this.plugin.settings;u?E.style.display="none":(this.browseLocallyButton.disabled=!0,this.stopKremsButton.disabled=!0,E.textContent="Please set Local Markdown Directory in settings.",E.style.display="block")};y(),this.browseLocallyButton.addEventListener("click",async()=>{var R,c;let{localMarkdownPath:u,localRunPort:o}=this.plugin.settings;if(!u){m("Error: Local Markdown Directory must be set.","error");return}if(this.browseLocallyButton.disabled=!0,m("Preparing local preview...","status"),!confirm("To preview your site locally, this will download the Krems binary (if not already present) and set executable permissions. This step is for local preview and not strictly necessary for publishing to GitHub. Is it okay to proceed?")){m("Local preview cancelled by user.","status"),y();return}let P=await this.plugin.ensureKremsBinary(m);if(!P){y();return}let b=this.app.vault.adapter.getBasePath(),k=v.join(b,P),L=v.join(b,u),S=o||W.localRunPort||"8080";m(`Starting Krems server on port ${S}...`,"status");try{this.plugin.localKremsProcess=(0,D.spawn)(k,["--run","--port",S],{cwd:L,shell:process.platform==="win32"}),this.plugin.isKremsLocallyRunning=!0,y(),m(`Krems server starting on port ${S}. Output:
`,"log"),setTimeout(()=>{window.open(`http://localhost:${S}`,"_blank")},1500),(R=this.plugin.localKremsProcess.stdout)==null||R.on("data",p=>{m(p.toString(),"log")}),(c=this.plugin.localKremsProcess.stderr)==null||c.on("data",p=>{m(`[STDERR] ${p.toString()}`,"log")}),this.plugin.localKremsProcess.on("error",p=>{console.error("Failed to start Krems process:",p),m(`Failed to start Krems: ${p.message}`,"error"),this.plugin.isKremsLocallyRunning=!1,this.plugin.localKremsProcess=null,y()}),this.plugin.localKremsProcess.on("close",p=>{m(`Krems server exited with code ${p}.`,p===0?"status":"error"),this.plugin.isKremsLocallyRunning=!1,this.plugin.localKremsProcess=null,y()})}catch(p){console.error("Error spawning Krems:",p),m(`Error starting Krems: ${p.message||p.toString()}`,"error"),this.plugin.isKremsLocallyRunning=!1,this.plugin.localKremsProcess=null,y()}}),this.stopKremsButton.addEventListener("click",async()=>{this.plugin.localKremsProcess?(m("Stopping Krems server...","status"),this.plugin.localKremsProcess.kill()):(m("Krems server is not running.","status"),this.plugin.isKremsLocallyRunning=!1,y());let u=this.plugin.settings.localKremsBinaryPath,{localMarkdownPath:o}=this.plugin.settings;if(u&&o){let K=this.app.vault.adapter.getBasePath(),P=v.join(K,o),b=v.join(K,u);m("Cleaning up .tmp directory...","status");try{await this.plugin.execShellCommand(`"${b}" --clean`,P,void 0,"krems --clean"),m("Cleanup successful.","status")}catch(k){console.error("Krems clean error:",k),m(`Cleanup failed: ${k.stderr||k.message}`,"error")}}});let x=e.createDiv({cls:"krems-modal-section"});x.createEl("h4",{text:"3. Push Site to GitHub"}),x.createEl("p",{text:`This will add, commit, and push the content of '${this.plugin.settings.localMarkdownPath||"not set"}' to your GitHub repo.`});let B=x.createEl("input",{type:"text",placeholder:"Optional commit message (default: latest site version)"});B.style.width="100%",B.style.marginBottom="10px";let T=x.createEl("button",{text:"Push to GitHub"}),U=x.createEl("div",{cls:"krems-feedback",attr:{style:"margin-top: 10px;"}}),f=(u,o)=>{U.textContent=u,U.className=`krems-feedback krems-feedback-${o}`};T.addEventListener("click",async()=>{let{localMarkdownPath:u,githubRepoUrl:o,gitAuthorName:K,gitAuthorEmail:P,gitPassword:b}=this.plugin.settings;if(!u||!o){f("Error: Local Markdown Directory and GitHub Repo URL must be set in plugin settings.","error");return}let k=this.app.vault.adapter.getBasePath(),L=v.join(k,u),R=(B.value.trim()||"latest site version").replace(/"/g,'\\"');T.disabled=!0,B.disabled=!0,f("Preparing to push site...","status");try{let c;f("Adding files (git add .)...","status"),c=await this.plugin.execShellCommand("git add .",L),c.stderr&&f(`Git add (warnings): ${c.stderr}`,"status"),f(`Committing with message: "${R}"...`,"status");let p=K||"Krems Obsidian Plugin",O=P||"krems-plugin@example.com",q={GIT_AUTHOR_NAME:p,GIT_AUTHOR_EMAIL:O,GIT_COMMITTER_NAME:p,GIT_COMMITTER_EMAIL:O};try{c=await this.plugin.execShellCommand(`git commit -m "${R}"`,L,q),c.stderr&&f(`Git commit (warnings): ${c.stderr}`,"status")}catch(M){if(M.stdout&&M.stdout.includes("nothing to commit"))f("No changes to commit. Proceeding to push...","status");else throw M}f("Pushing to remote repository...","status");let _="git push",j="git push";if(b&&o.startsWith("https://")){let M=o.substring(8),J=`https://${b}@${M}`,H="main";try{c=await this.plugin.execShellCommand("git rev-parse --abbrev-ref HEAD",L),H=c.stdout,c.stderr&&f(`Git branch check (warnings): ${c.stderr}`,"status")}catch(I){console.warn("Could not determine current branch, defaulting to 'main'. Error:",I.message),f(`Warning: Could not determine current branch (using 'main'). Details: ${I.stderr||I.message}`,"status")}_=`git push ${J} ${H}`,j=`git push <authenticated_url> ${H}`,f(`Pushing to ${o} (authenticated)...`,"status")}else f(`Pushing to ${o} (unauthenticated, ensure credential helper or SSH is set up)...`,"status");c=await this.plugin.execShellCommand(_,L,void 0,j),c.stderr?f(`Push successful with warnings: ${c.stderr}`,"success"):f("Site pushed successfully!","success")}catch(c){console.error("Push error:",c.message||c);let p=`Push failed: ${c.message||c.toString()}${c.stderr?`
Stderr: ${c.stderr}`:""}`;f(p,"error")}finally{T.disabled=!1,B.disabled=!1}}),(!this.plugin.settings.localMarkdownPath||!this.plugin.settings.githubRepoUrl)&&(T.disabled=!0,B.disabled=!0,x.createEl("p",{text:"Please set Local Markdown Directory and GitHub Repo URL in settings.",cls:"krems-warning"})),e.createEl("hr");let A=e.createEl("p",{cls:"krems-modal-footer"});A.setText("For help, see the "),A.createEl("a",{text:"plugin documentation",href:"https://github.com/mreider/krems-obsidian-plugin/",attr:{target:"_blank",rel:"noopener noreferrer"}}),A.appendText(".")}onClose(){let{contentEl:e}=this;e.empty()}},F=class extends g.PluginSettingTab{constructor(e,r){super(e,r);this.plugin=r}display(){let{containerEl:e}=this;e.empty(),e.createEl("h2",{text:"Krems Publisher Settings"});let r=(t,s,l,n)=>{t.classList.remove("krems-input-valid","krems-input-invalid"),s.classList.remove("krems-feedback-valid","krems-feedback-invalid"),s.textContent=l,s.style.display=l?"block":"none",l&&(t.classList.add(n?"krems-input-valid":"krems-input-invalid"),s.classList.add(n?"krems-feedback-valid":"krems-feedback-invalid"))};new g.Setting(e).setName("GitHub Repository URL").setDesc("HTTPS URL of your GitHub repository (e.g., https://github.com/username/repo). Do not include .git at the end.").addText(t=>{var l;let s=(l=t.inputEl.parentElement)==null?void 0:l.createEl("div",{cls:"krems-setting-feedback",attr:{style:"display: none; margin-top: 5px;"}});t.setPlaceholder("https://github.com/username/repo").setValue(this.plugin.settings.githubRepoUrl).onChange(async n=>{this.plugin.settings.githubRepoUrl=n.trim(),await this.plugin.saveSettings()}),t.inputEl.addEventListener("focusout",async()=>{let n=this.plugin.settings.githubRepoUrl,i=!0,a="";if(!n){r(t.inputEl,s,"",!0);return}if(!n.startsWith("https://github.com/"))i=!1,a="URL must start with https://github.com/";else if(n.endsWith(".git"))i=!1,a="URL should not end with .git";else{let E=n.substring(19).split("/");(E.length<2||!E[0]||!E[1])&&(i=!1,a="Invalid GitHub repository URL format.")}i&&a===""&&(a="URL format is valid."),r(t.inputEl,s,a,i)}),this.plugin.settings.githubRepoUrl&&t.inputEl.dispatchEvent(new Event("focusout"))}),new g.Setting(e).setName("Local Markdown Directory").setDesc("Path to the directory in your vault for your Krems site (e.g., MyKremsSite).").addText(t=>{var l;let s=(l=t.inputEl.parentElement)==null?void 0:l.createEl("div",{cls:"krems-setting-feedback",attr:{style:"display: none; margin-top: 5px;"}});t.setPlaceholder("e.g., MyKremsSite or path/to/site").setValue(this.plugin.settings.localMarkdownPath).onChange(async n=>{this.plugin.settings.localMarkdownPath=n.trim(),await this.plugin.saveSettings()}),t.inputEl.addEventListener("focusout",async()=>{let n=this.plugin.settings.localMarkdownPath,i=!1,a="";if(!n){r(t.inputEl,s,"",!0);return}let E=this.app.vault.getAbstractFileByPath(n);E&&E instanceof g.TFolder?(i=!0,a="Directory exists."):(i=!1,a="Directory not found in the vault."),r(t.inputEl,s,a,i)}),this.plugin.settings.localMarkdownPath&&t.inputEl.dispatchEvent(new Event("focusout"))}),new g.Setting(e).setName("GitHub Personal Access Token (PAT)").setDesc('Required for pushing to HTTPS repositories. Create a PAT on GitHub with "repo" and "workflow" scopes. See plugin README for instructions.').addText(t=>{t.inputEl.type="password",t.setPlaceholder("Enter your GitHub PAT").setValue(this.plugin.settings.gitPassword||"").onChange(async s=>{this.plugin.settings.gitPassword=s,await this.plugin.saveSettings()})}),new g.Setting(e).setName("Git Author Name").setDesc('Name to use for Git commits (e.g., Your Name). If blank, a default ("Krems Obsidian Plugin") will be used.').addText(t=>t.setPlaceholder("Your Name").setValue(this.plugin.settings.gitAuthorName||"").onChange(async s=>{this.plugin.settings.gitAuthorName=s.trim(),await this.plugin.saveSettings()})),new g.Setting(e).setName("Git Author Email").setDesc('Email to use for Git commits (e.g., your.email@example.com). If blank, a default ("krems-plugin@example.com") will be used.').addText(t=>t.setPlaceholder("your.email@example.com").setValue(this.plugin.settings.gitAuthorEmail||"").onChange(async s=>{this.plugin.settings.gitAuthorEmail=s.trim(),await this.plugin.saveSettings()})),new g.Setting(e).setName("Port for Local Server (Optional)").setDesc('Port for "Browse Locally" feature. Defaults to 8080 if blank or invalid.').addText(t=>{var l;let s=(l=t.inputEl.parentElement)==null?void 0:l.createEl("div",{cls:"krems-setting-feedback",attr:{style:"display: none; margin-top: 5px;"}});t.setPlaceholder("e.g., 8080").setValue(this.plugin.settings.localRunPort||"").onChange(async n=>{this.plugin.settings.localRunPort=n.trim(),await this.plugin.saveSettings()}),t.inputEl.addEventListener("focusout",()=>{let n=this.plugin.settings.localRunPort;if(!n){r(t.inputEl,s,"Using default port 8080.",!0);return}let i=parseInt(n,10);isNaN(i)||i<1024||i>65535?r(t.inputEl,s,"Invalid port. Must be a number between 1024-65535.",!1):r(t.inputEl,s,"Port is valid.",!0)}),this.plugin.settings.localRunPort&&t.inputEl.dispatchEvent(new Event("focusout"))}),e.createEl("hr");let d=e.createEl("p",{cls:"krems-settings-footer"});d.setText("For plugin instructions, troubleshooting, and more information, please visit the "),d.createEl("a",{text:"plugin documentation on GitHub",href:"https://github.com/mreider/krems-obsidian-plugin/",attr:{target:"_blank",rel:"noopener noreferrer"}}),d.appendText(".")}};
