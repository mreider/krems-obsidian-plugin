/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var tt=Object.create;var D=Object.defineProperty;var et=Object.getOwnPropertyDescriptor;var st=Object.getOwnPropertyNames;var it=Object.getPrototypeOf,nt=Object.prototype.hasOwnProperty;var rt=(p,E)=>{for(var e in E)D(p,e,{get:E[e],enumerable:!0})},q=(p,E,e,a)=>{if(E&&typeof E=="object"||typeof E=="function")for(let d of st(E))!nt.call(p,d)&&d!==e&&D(p,d,{get:()=>E[d],enumerable:!(a=et(E,d))||a.enumerable});return p};var Y=(p,E,e)=>(e=p!=null?tt(it(p)):{},q(E||!p||!p.__esModule?D(e,"default",{value:p,enumerable:!0}):e,p)),at=p=>q(D({},"__esModule",{value:!0}),p);var ot={};rt(ot,{default:()=>A});module.exports=at(ot);var h=require("obsidian"),S=Y(require("path")),U=Y(require("fs")),F=require("child_process"),Z={githubRepoUrl:"",localMarkdownPath:"",gitPassword:"",gitAuthorName:"",gitAuthorEmail:"",localRunPort:"8080",localKremsBinaryPath:"",alternativeCSSDir:"",alternativeJSDir:"",alternativeFavicon:""},A=class extends h.Plugin{constructor(){super(...arguments);this.isKremsLocallyRunning=!1;this.localKremsProcess=null}async onload(){await this.loadSettings(),this.addRibbonIcon("cloud-lightning","Krems Publisher",e=>{new O(this.app,this).open()}),this.addSettingTab(new _(this.app,this)),console.log("Krems Obsidian Plugin loaded.")}onunload(){this.localKremsProcess&&(console.log("Krems Obsidian Plugin unloading: Killing active Krems process."),this.localKremsProcess.kill(),this.localKremsProcess=null,this.isKremsLocallyRunning=!1),console.log("Krems Obsidian Plugin unloaded.")}async loadSettings(){this.settings=Object.assign({},Z,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}async execShellCommand(e,a,d,t){return new Promise((i,c)=>{let l=d?{...process.env,...d}:process.env,r=t||e;(0,F.exec)(e,{cwd:a,env:l},(g,f,j)=>{let k={stdout:f.trim(),stderr:j.trim()};if(g){console.error(`Command failed: ${r}
Error: ${g.message}
Stdout: ${k.stdout}
Stderr: ${k.stderr}`),c({message:`Command failed: ${r}. Error: ${g.message}`,stdout:k.stdout,stderr:k.stderr,originalError:g});return}k.stderr&&console.warn(`Command successful but stderr present: ${r}
Stderr: ${k.stderr}`),i(k)})})}getKremsBinaryDir(){return S.join(this.app.vault.configDir,"plugins",this.manifest.id,"bin")}getKremsBinaryName(){switch(process.platform){case"win32":return"krems-windows-amd64.exe";case"darwin":return"krems-darwin-amd64";case"linux":return"krems-linux-amd64";default:return""}}async ensureKremsBinary(e){let a=this.getKremsBinaryName();if(!a)return e("Unsupported operating system for Krems download.","error"),null;let d=this.getKremsBinaryDir(),t=S.join(d,a),i=this.app.vault.adapter.getBasePath(),c=S.join(i,t);this.settings.localKremsBinaryPath=t,await this.saveSettings();let l=this.app.vault.adapter;try{if(await l.exists(t)){if(e("Krems binary already downloaded.","status"),process.platform!=="win32")try{U.chmodSync(c,493)}catch(r){return console.error("Failed to chmod existing binary:",r),e("Found Krems binary, but failed to set executable permission. Please check manually.","error"),null}return t}}catch(r){console.error("Error checking for existing Krems binary:",r),e("Error checking for existing Krems binary. Attempting download.","error")}e(`Downloading Krems for ${process.platform}...`,"status");try{await l.exists(d)||await l.mkdir(d);let r=`https://github.com/mreider/krems/releases/latest/download/${a}`,g=await(0,h.requestUrl)({url:r,method:"GET"});if(g.status!==200)throw new Error(`Failed to download Krems: Server responded with ${g.status}`);return await l.writeBinary(t,g.arrayBuffer),e("Krems downloaded successfully.","status"),process.platform!=="win32"&&(e("Setting executable permissions...","status"),U.chmodSync(c,493),e("Permissions set.","status")),t}catch(r){return console.error("Krems download error:",r),e(`Failed to download Krems: ${r.message||r.toString()}`,"error"),null}}},O=class extends h.Modal{constructor(e,a){super(e);this.plugin=a}async checkIfDirIsEmpty(e){try{let d=await this.app.vault.adapter.list(e);return d.files.length===0&&d.folders.length===0}catch(a){return console.warn(`Error listing contents of '${e}':`,a),!1}}async onOpen(){let{contentEl:e}=this;e.empty(),e.createEl("h2",{text:"Krems Publisher Actions"});let a=e.createDiv({cls:"krems-modal-section"});a.createEl("h4",{text:"1. Clone Your Repo"});let d=a.createEl("p",{text:`This will clone your repo from GitHub into your specified local directory (${this.plugin.settings.localMarkdownPath||"not set"}).`});this.initButton=a.createEl("button",{text:"Clone Your Repo"}),this.initFeedbackEl=a.createEl("div",{cls:"krems-feedback",attr:{style:"margin-top: 10px;"}});let t=a.createEl("p",{cls:"krems-warning",attr:{style:"display: none;"}}),i=(s,n)=>{this.initFeedbackEl.textContent=s,this.initFeedbackEl.className=`krems-feedback krems-feedback-${n}`},c=this.plugin.settings.localMarkdownPath,l=!!this.plugin.settings.githubRepoUrl;!c||!l?(this.initButton.disabled=!0,t.textContent="Please set Local Markdown Directory and GitHub Repo URL in settings.",t.style.display="block"):this.app.vault.adapter.stat(c).then(async n=>{n?n.type==="folder"?await this.checkIfDirIsEmpty(c)?(t.style.display="none",this.initButton.disabled=!1):(this.initButton.disabled=!0,t.textContent=`Directory '${c}' is not empty. Can only initialize empty directories.`,t.style.display="block"):(this.initButton.disabled=!0,t.textContent=`Path '${c}' is a file, not a directory. Initialization requires a directory path.`,t.style.display="block"):(t.style.display="none",this.initButton.disabled=!1)}).catch(n=>{console.error(`Error checking path '${c}' for init button state:`,n),this.initButton.disabled=!0,t.textContent="Error checking local directory status. Initialization disabled.",t.style.display="block"}),this.initButton.addEventListener("click",async()=>{let{localMarkdownPath:s,githubRepoUrl:n}=this.plugin.settings;if(!s||!n){i("Error: Local Markdown Directory and GitHub Repo URL must be set in plugin settings.","error");return}let K=this.app.vault.adapter.getBasePath(),v=S.join(K,s);if(await this.app.vault.adapter.exists(s)&&!await this.checkIfDirIsEmpty(s)){i(`Error: Directory '${s}' is not empty. Please choose an empty or new directory.`,"error");return}this.initButton.disabled=!0,i(`Cloning your repository from ${n}...`,"status");try{let u=`git clone ${n} "${v}"`;await this.plugin.execShellCommand(u,K,void 0,"git clone <your-repo-url> <path>"),i("Repository cloned successfully!","success")}catch(u){console.error("Cloning error:",u.message||u);let C=u.stderr||u.message||u.toString();i(`Cloning failed: ${C}`,"error")}finally{this.initButton.disabled=!1}});let r=e.createDiv({cls:"krems-modal-section"});r.createEl("h4",{text:"Clean and Clone Repository"}),r.createEl("p",{text:`This will completely WIPE the local directory '${this.plugin.settings.localMarkdownPath||"not set"}' and re-clone your site from the master/main branch of your configured GitHub repository. Use with caution!`}),r.createEl("p",{text:"WARNING: This action is destructive and will delete all local changes in the target directory not pushed to your remote repository.",cls:"krems-warning"}),this.cleanCloneButton=r.createEl("button",{text:"Clean and Clone Directory"}),this.cleanCloneFeedbackEl=r.createEl("div",{cls:"krems-feedback",attr:{style:"margin-top: 10px;"}});let g=r.createEl("p",{cls:"krems-warning",attr:{style:"display: none;"}}),f=(s,n)=>{this.cleanCloneFeedbackEl.textContent=s,this.cleanCloneFeedbackEl.className=`krems-feedback krems-feedback-${n}`};(()=>{let{localMarkdownPath:s,githubRepoUrl:n}=this.plugin.settings;!s||!n?(this.cleanCloneButton.disabled=!0,g.textContent="Please set Local Markdown Directory and GitHub Repo URL in settings.",g.style.display="block"):(this.cleanCloneButton.disabled=!1,g.style.display="none")})(),this.cleanCloneButton.addEventListener("click",async()=>{let{localMarkdownPath:s,githubRepoUrl:n}=this.plugin.settings;if(!s||!n){f("Error: Local Markdown Directory and GitHub Repo URL must be set.","error");return}if(!confirm(`ARE YOU SURE?
This will delete everything in '${s}' and clone a fresh copy from '${n}'. This action cannot be undone.`)){f("Clean and Clone operation cancelled by user.","status");return}this.cleanCloneButton.disabled=!0,f("Starting Clean and Clone operation...","status");let v=this.app.vault.adapter.getBasePath(),u=S.join(v,s),C=this.app.vault.adapter;try{if(await C.exists(s)){if(f(`Deleting existing directory: ${s}...`,"status"),!u.startsWith(v))throw new Error("Security check failed: Path to delete is outside the vault.");try{let P,o;process.platform==="win32"?(P=`rd /s /q "${u}"`,o='rd /s /q "<path>"'):(P=`rm -rf "${u}"`,o='rm -rf "<path>"'),await this.plugin.execShellCommand(P,v,void 0,o),f(`Directory ${s} deleted.`,"status")}catch(P){console.error(`Error deleting directory with shell command: ${u}`,P);let o=P.message||"Unknown error";P.stderr&&(o+=`
Stderr: ${P.stderr}`),f(`Failed to delete directory '${s}' using shell command: ${o}. Please ensure the directory is not in use and try again, or remove it manually.`,"error"),this.cleanCloneButton.disabled=!1;return}}else f(`Directory ${s} does not exist. Proceeding to clone.`,"status");let y=S.dirname(s);y&&y!=="."&&!await C.exists(y)&&await C.mkdir(y),f(`Cloning from ${n} into ${s}...`,"status");let x=`git clone --depth 1 ${n} "${u}"`;await this.plugin.execShellCommand(x,v,void 0,"git clone <repo_url> <path>"),f("Repository cloned successfully.","success")}catch(y){console.error("Clean and Clone error:",y.message||y);let x=y.stderr||y.message||y.toString();f(`Clean and Clone failed: ${x}`,"error")}finally{this.cleanCloneButton.disabled=!1}});let k=e.createDiv({cls:"krems-modal-section"});k.createEl("h4",{text:"2. Preview Site Locally"}),this.browseLocallyButton=k.createEl("button",{text:"Browse Locally"}),this.stopKremsButton=k.createEl("button",{text:"Stop Local Server"});let R=k.createEl("div",{cls:"krems-feedback",attr:{style:"margin-top: 10px; white-space: pre-wrap; background-color: var(--background-secondary); padding: 5px; border-radius: 3px; max-height: 150px; overflow-y: auto;"}}),N=k.createEl("p",{cls:"krems-warning",attr:{style:"display: none;"}}),b=(s,n)=>{n==="log"?(R.textContent+=s+`
`,R.scrollTop=R.scrollHeight):R.textContent=s,R.className=`krems-feedback krems-feedback-${n}`},B=()=>{this.plugin.isKremsLocallyRunning?(this.browseLocallyButton.setText("Server Running"),this.browseLocallyButton.disabled=!0,this.stopKremsButton.disabled=!1):(this.browseLocallyButton.setText("Browse Locally"),this.browseLocallyButton.disabled=!1,this.stopKremsButton.disabled=!0);let{localMarkdownPath:s}=this.plugin.settings;s?N.style.display="none":(this.browseLocallyButton.disabled=!0,this.stopKremsButton.disabled=!0,N.textContent="Please set Local Markdown Directory in settings.",N.style.display="block")};B(),this.browseLocallyButton.addEventListener("click",async()=>{var P,o;let{localMarkdownPath:s,localRunPort:n}=this.plugin.settings;if(!s){b("Error: Local Markdown Directory must be set.","error");return}if(this.browseLocallyButton.disabled=!0,b("Preparing local preview...","status"),!confirm("To preview your site locally, this will download the Krems binary (if not already present) and set executable permissions. This step is for local preview and not strictly necessary for publishing to GitHub. Is it okay to proceed?")){b("Local preview cancelled by user.","status"),B();return}let v=await this.plugin.ensureKremsBinary(b);if(!v){B();return}let u=this.app.vault.adapter.getBasePath(),C=S.join(u,v),y=S.join(u,s),x=n||Z.localRunPort||"8080";b(`Starting Krems server on port ${x}...`,"status");try{this.plugin.localKremsProcess=(0,F.spawn)(C,["--run","--port",x],{cwd:y,shell:process.platform==="win32"}),this.plugin.isKremsLocallyRunning=!0,B(),b(`Krems server starting on port ${x}. Output:
`,"log"),setTimeout(()=>{window.open(`http://localhost:${x}`,"_blank")},1500),(P=this.plugin.localKremsProcess.stdout)==null||P.on("data",m=>{b(m.toString(),"log")}),(o=this.plugin.localKremsProcess.stderr)==null||o.on("data",m=>{b(`[STDERR] ${m.toString()}`,"log")}),this.plugin.localKremsProcess.on("error",m=>{console.error("Failed to start Krems process:",m),b(`Failed to start Krems: ${m.message}`,"error"),this.plugin.isKremsLocallyRunning=!1,this.plugin.localKremsProcess=null,B()}),this.plugin.localKremsProcess.on("close",m=>{b(`Krems server exited with code ${m}.`,m===0?"status":"error"),this.plugin.isKremsLocallyRunning=!1,this.plugin.localKremsProcess=null,B()})}catch(m){console.error("Error spawning Krems:",m),b(`Error starting Krems: ${m.message||m.toString()}`,"error"),this.plugin.isKremsLocallyRunning=!1,this.plugin.localKremsProcess=null,B()}}),this.stopKremsButton.addEventListener("click",async()=>{this.plugin.localKremsProcess?(b("Stopping Krems server...","status"),this.plugin.localKremsProcess.kill()):(b("Krems server is not running.","status"),this.plugin.isKremsLocallyRunning=!1,B());let s=this.plugin.settings.localKremsBinaryPath,{localMarkdownPath:n}=this.plugin.settings;if(s&&n){let K=this.app.vault.adapter.getBasePath(),v=S.join(K,n),u=S.join(K,s);b("Cleaning up .tmp directory...","status");try{await this.plugin.execShellCommand(`"${u}" --clean`,v,void 0,"krems --clean"),b("Cleanup successful.","status")}catch(C){console.error("Krems clean error:",C),b(`Cleanup failed: ${C.stderr||C.message}`,"error")}}});let L=e.createDiv({cls:"krems-modal-section"});L.createEl("h4",{text:"4. Push Site to GitHub"}),L.createEl("p",{text:`This will add, commit, and push the content of '${this.plugin.settings.localMarkdownPath||"not set"}' to your GitHub repo.`});let $=L.createEl("input",{type:"text",placeholder:"Optional commit message (default: latest site version)"});$.style.width="100%",$.style.marginBottom="10px";let T=L.createEl("button",{text:"Push to GitHub"}),V=L.createEl("div",{cls:"krems-feedback",attr:{style:"margin-top: 10px;"}}),w=(s,n)=>{V.textContent=s,V.className=`krems-feedback krems-feedback-${n}`};T.addEventListener("click",async()=>{let{localMarkdownPath:s,githubRepoUrl:n,gitAuthorName:K,gitAuthorEmail:v,gitPassword:u}=this.plugin.settings;if(!s||!n){w("Error: Local Markdown Directory and GitHub Repo URL must be set in plugin settings.","error");return}let C=this.app.vault.adapter.getBasePath(),y=S.join(C,s),P=($.value.trim()||"latest site version").replace(/"/g,'\\"');T.disabled=!0,$.disabled=!0,w("Preparing to push site...","status");try{let o;w("Adding files (git add .)...","status"),o=await this.plugin.execShellCommand("git add .",y),o.stderr&&w(`Git add (warnings): ${o.stderr}`,"status"),w(`Committing with message: "${P}"...`,"status");let m=K||"Krems Obsidian Plugin",W=v||"krems-plugin@example.com",Q={GIT_AUTHOR_NAME:m,GIT_AUTHOR_EMAIL:W,GIT_COMMITTER_NAME:m,GIT_COMMITTER_EMAIL:W};try{o=await this.plugin.execShellCommand(`git commit -m "${P}"`,y,Q),o.stderr&&w(`Git commit (warnings): ${o.stderr}`,"status")}catch(M){if(M.stdout&&M.stdout.includes("nothing to commit"))w("No changes to commit. Proceeding to push...","status");else throw M}w("Pushing to remote repository...","status");let J="git push",z="git push";if(u&&n.startsWith("https://")){let M=n.substring(8),X=`https://${u}@${M}`,G="main";try{o=await this.plugin.execShellCommand("git rev-parse --abbrev-ref HEAD",y),G=o.stdout,o.stderr&&w(`Git branch check (warnings): ${o.stderr}`,"status")}catch(I){console.warn("Could not determine current branch, defaulting to 'main'. Error:",I.message),w(`Warning: Could not determine current branch (using 'main'). Details: ${I.stderr||I.message}`,"status")}J=`git push ${X} ${G}`,z=`git push <authenticated_url> ${G}`,w(`Pushing to ${n} (authenticated)...`,"status")}else w(`Pushing to ${n} (unauthenticated, ensure credential helper or SSH is set up)...`,"status");o=await this.plugin.execShellCommand(J,y,void 0,z),o.stderr?w(`Push successful with warnings: ${o.stderr}`,"success"):w("Site pushed successfully!","success")}catch(o){console.error("Push error:",o.message||o);let m=`Push failed: ${o.message||o.toString()}${o.stderr?`
Stderr: ${o.stderr}`:""}`;w(m,"error")}finally{T.disabled=!1,$.disabled=!1}}),(!this.plugin.settings.localMarkdownPath||!this.plugin.settings.githubRepoUrl)&&(T.disabled=!0,$.disabled=!0,L.createEl("p",{text:"Please set Local Markdown Directory and GitHub Repo URL in settings.",cls:"krems-warning"})),e.createEl("hr");let H=e.createEl("p",{cls:"krems-modal-footer"});H.setText("For help, see the "),H.createEl("a",{text:"plugin documentation",href:"https://github.com/mreider/krems-obsidian-plugin/",attr:{target:"_blank",rel:"noopener noreferrer"}}),H.appendText(".")}onClose(){let{contentEl:e}=this;e.empty()}},_=class extends h.PluginSettingTab{constructor(e,a){super(e,a);this.plugin=a}display(){let{containerEl:e}=this;e.empty(),e.createEl("h2",{text:"Krems Publisher Settings"});let a=(t,i,c,l)=>{t.classList.remove("krems-input-valid","krems-input-invalid"),i.classList.remove("krems-feedback-valid","krems-feedback-invalid"),i.textContent=c,i.style.display=c?"block":"none",c&&(t.classList.add(l?"krems-input-valid":"krems-input-invalid"),i.classList.add(l?"krems-feedback-valid":"krems-feedback-invalid"))};new h.Setting(e).setName("GitHub Repository URL").setDesc("Git URL of your forked repository (e.g., git://github.com/username/repo.git).").addText(t=>{var c;let i=(c=t.inputEl.parentElement)==null?void 0:c.createEl("div",{cls:"krems-setting-feedback",attr:{style:"display: none; margin-top: 5px;"}});t.setPlaceholder("git://github.com/username/repo.git").setValue(this.plugin.settings.githubRepoUrl).onChange(async l=>{this.plugin.settings.githubRepoUrl=l.trim(),await this.plugin.saveSettings()}),t.inputEl.addEventListener("focusout",async()=>{let l=this.plugin.settings.githubRepoUrl,r=!0,g="";if(!l){a(t.inputEl,i,"",!0);return}/^git:\/\/github\.com\/[a-zA-Z0-9_-]+\/[a-zA-Z0-9_-]+(\.git)?$/.test(l)?g="URL format is valid.":(r=!1,g="Invalid format. Use git://github.com/user/repo.git"),a(t.inputEl,i,g,r)}),this.plugin.settings.githubRepoUrl&&t.inputEl.dispatchEvent(new Event("focusout"))}),new h.Setting(e).setName("Local Markdown Directory").setDesc("Path to the directory in your vault for your Krems site (e.g., MyKremsSite).").addText(t=>{var c;let i=(c=t.inputEl.parentElement)==null?void 0:c.createEl("div",{cls:"krems-setting-feedback",attr:{style:"display: none; margin-top: 5px;"}});t.setPlaceholder("e.g., MyKremsSite or path/to/site").setValue(this.plugin.settings.localMarkdownPath).onChange(async l=>{this.plugin.settings.localMarkdownPath=l.trim(),await this.plugin.saveSettings()}),t.inputEl.addEventListener("focusout",async()=>{let l=this.plugin.settings.localMarkdownPath,r=!1,g="";if(!l){a(t.inputEl,i,"",!0);return}let f=this.app.vault.getAbstractFileByPath(l);f&&f instanceof h.TFolder?(r=!0,g="Directory exists."):(r=!1,g="Directory not found in the vault."),a(t.inputEl,i,g,r)}),this.plugin.settings.localMarkdownPath&&t.inputEl.dispatchEvent(new Event("focusout"))}),new h.Setting(e).setName("GitHub Personal Access Token (PAT)").setDesc('Required for pushing to HTTPS repositories. Create a PAT on GitHub with "repo" and "workflow" scopes. See plugin README for instructions.').addText(t=>{t.inputEl.type="password",t.setPlaceholder("Enter your GitHub PAT").setValue(this.plugin.settings.gitPassword||"").onChange(async i=>{this.plugin.settings.gitPassword=i,await this.plugin.saveSettings()})}),new h.Setting(e).setName("Git Author Name").setDesc('Name to use for Git commits (e.g., Your Name). If blank, a default ("Krems Obsidian Plugin") will be used.').addText(t=>t.setPlaceholder("Your Name").setValue(this.plugin.settings.gitAuthorName||"").onChange(async i=>{this.plugin.settings.gitAuthorName=i.trim(),await this.plugin.saveSettings()})),new h.Setting(e).setName("Git Author Email").setDesc('Email to use for Git commits (e.g., your.email@example.com). If blank, a default ("krems-plugin@example.com") will be used.').addText(t=>t.setPlaceholder("your.email@example.com").setValue(this.plugin.settings.gitAuthorEmail||"").onChange(async i=>{this.plugin.settings.gitAuthorEmail=i.trim(),await this.plugin.saveSettings()})),new h.Setting(e).setName("Port for Local Server (Optional)").setDesc('Port for "Browse Locally" feature. Defaults to 8080 if blank or invalid.').addText(t=>{var c;let i=(c=t.inputEl.parentElement)==null?void 0:c.createEl("div",{cls:"krems-setting-feedback",attr:{style:"display: none; margin-top: 5px;"}});t.setPlaceholder("e.g., 8080").setValue(this.plugin.settings.localRunPort||"").onChange(async l=>{this.plugin.settings.localRunPort=l.trim(),await this.plugin.saveSettings()}),t.inputEl.addEventListener("focusout",()=>{let l=this.plugin.settings.localRunPort;if(!l){a(t.inputEl,i,"Using default port 8080.",!0);return}let r=parseInt(l,10);isNaN(r)||r<1024||r>65535?a(t.inputEl,i,"Invalid port. Must be a number between 1024-65535.",!1):a(t.inputEl,i,"Port is valid.",!0)}),this.plugin.settings.localRunPort&&t.inputEl.dispatchEvent(new Event("focusout"))}),e.createEl("h3",{text:"Alternative Asset Paths (Optional)"}),e.createEl("p",{text:'Specify paths relative to your "Local Markdown Directory" for custom CSS, JS, or favicon. If left blank, Krems defaults will be used.'}),new h.Setting(e).setName("Alternative CSS Directory").setDesc('Path to a directory containing your custom .css files (e.g., "my-styles/css").').addText(t=>t.setPlaceholder("e.g., assets/css").setValue(this.plugin.settings.alternativeCSSDir||"").onChange(async i=>{this.plugin.settings.alternativeCSSDir=i.trim(),await this.plugin.saveSettings()})),new h.Setting(e).setName("Alternative JS Directory").setDesc('Path to a directory containing your custom .js files (e.g., "my-scripts/js").').addText(t=>t.setPlaceholder("e.g., assets/js").setValue(this.plugin.settings.alternativeJSDir||"").onChange(async i=>{this.plugin.settings.alternativeJSDir=i.trim(),await this.plugin.saveSettings()})),new h.Setting(e).setName("Alternative Favicon File").setDesc('Path to your custom favicon file (e.g., "my-images/favicon.png").').addText(t=>t.setPlaceholder("e.g., assets/images/custom-favicon.ico").setValue(this.plugin.settings.alternativeFavicon||"").onChange(async i=>{this.plugin.settings.alternativeFavicon=i.trim(),await this.plugin.saveSettings()})),e.createEl("hr");let d=e.createEl("p",{cls:"krems-settings-footer"});d.setText("For plugin instructions, troubleshooting, and more information, please visit the "),d.createEl("a",{text:"plugin documentation on GitHub",href:"https://github.com/mreider/krems-obsidian-plugin/",attr:{target:"_blank",rel:"noopener noreferrer"}}),d.appendText(".")}};
