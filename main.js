/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var H=Object.create;var v=Object.defineProperty;var A=Object.getOwnPropertyDescriptor;var G=Object.getOwnPropertyNames;var K=Object.getPrototypeOf,F=Object.prototype.hasOwnProperty;var O=(o,u)=>{for(var t in u)v(o,t,{get:u[t],enumerable:!0})},C=(o,u,t,n)=>{if(u&&typeof u=="object"||typeof u=="function")for(let c of G(u))!F.call(o,c)&&c!==t&&v(o,c,{get:()=>u[c],enumerable:!(n=A(u,c))||n.enumerable});return o};var I=(o,u,t)=>(t=o!=null?H(K(o)):{},C(u||!o||!o.__esModule?v(t,"default",{value:o,enumerable:!0}):t,o)),B=o=>C(v({},"__esModule",{value:!0}),o);var z={};O(z,{default:()=>R});module.exports=B(z);var h=require("obsidian"),x=I(require("path")),T=require("child_process"),N={githubRepoUrl:"",localMarkdownPath:"",gitPassword:""},R=class extends h.Plugin{async onload(){await this.loadSettings(),this.addRibbonIcon("cloud-lightning","Krems Publisher",t=>{new S(this.app,this).open()}),this.addSettingTab(new L(this.app,this)),console.log("Krems Obsidian Plugin loaded.")}onunload(){console.log("Krems Obsidian Plugin unloaded.")}async loadSettings(){this.settings=Object.assign({},N,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}async execShellCommand(t,n){return new Promise((c,y)=>{(0,T.exec)(t,{cwd:n},(l,g,d)=>{if(l){console.error(`exec error: ${l.message}`),y(`Error: ${l.message}
Stderr: ${d}`);return}d&&console.warn(`exec stderr: ${d}`),c(g.trim())})})}},S=class extends h.Modal{constructor(t,n){super(t);this.plugin=n}onOpen(){let{contentEl:t}=this;t.empty(),t.createEl("h2",{text:"Krems Publisher Actions"});let n=t.createDiv({cls:"krems-modal-section"});n.createEl("h4",{text:"1. Initialize Local Directory"}),n.createEl("p",{text:`This will clone krems-example into your specified local directory (${this.plugin.settings.localMarkdownPath||"not set"}) and set its remote to your GitHub repo.`});let c=n.createEl("button",{text:"Initialize Directory"}),y=n.createEl("div",{cls:"krems-feedback",attr:{style:"margin-top: 10px;"}}),l=(a,f)=>{y.textContent=a,y.className=`krems-feedback krems-feedback-${f}`};c.addEventListener("click",async()=>{let{localMarkdownPath:a,githubRepoUrl:f}=this.plugin.settings;if(!a||!f){l("Error: Local Markdown Directory and GitHub Repo URL must be set in plugin settings.","error");return}let E=this.app.vault.adapter.getBasePath(),p=x.join(E,a);try{let m=this.app.vault.adapter;if(await m.exists(p)){let k=await m.stat(p);if(k&&k.type==="folder"){let b=await m.list(p);if(b.files.length>0||b.folders.length>0){l(`Error: Directory '${a}' already exists and is not empty. Please choose an empty or new directory.`,"error");return}}else{l(`Error: Path '${a}' exists but is not a directory.`,"error");return}}}catch(m){console.log("Directory check for init:",m)}c.disabled=!0,l("Cloning krems-example repository...","status");try{let m=`git clone https://github.com/mreider/krems-example "${p}"`;await this.plugin.execShellCommand(m,E),l("Repository cloned. Setting remote URL...","status");let k=`git -C "${p}" remote set-url origin "${f}"`;await this.plugin.execShellCommand(k,E),l("Remote URL set. Cleaning up README.md...","status");let b=x.join(p,"README.md");await this.app.vault.adapter.exists(b)?(await this.app.vault.adapter.remove(b),l("Directory initialized successfully! README.md removed.","success")):l("Directory initialized successfully! (README.md not found to remove).","success")}catch(m){console.error("Initialization error:",m),l(`Initialization failed: ${m}`,"error")}finally{c.disabled=!1}}),(!this.plugin.settings.localMarkdownPath||!this.plugin.settings.githubRepoUrl)&&(c.disabled=!0,n.createEl("p",{text:"Please set Local Markdown Directory and GitHub Repo URL in settings.",cls:"krems-warning"}));let g=t.createDiv({cls:"krems-modal-section"});g.createEl("h4",{text:"3. Push Site to GitHub"}),g.createEl("p",{text:`This will add, commit, and push the content of '${this.plugin.settings.localMarkdownPath||"not set"}' to your GitHub repo.`});let d=g.createEl("input",{type:"text",placeholder:"Optional commit message (default: latest site version)"});d.style.width="100%",d.style.marginBottom="10px";let s=g.createEl("button",{text:"Push to GitHub"}),i=g.createEl("div",{cls:"krems-feedback",attr:{style:"margin-top: 10px;"}}),e=(a,f)=>{i.textContent=a,i.className=`krems-feedback krems-feedback-${f}`};s.addEventListener("click",async()=>{let{localMarkdownPath:a,githubRepoUrl:f}=this.plugin.settings;if(!a||!f){e("Error: Local Markdown Directory and GitHub Repo URL must be set in plugin settings.","error");return}let E=this.app.vault.adapter.getBasePath(),p=x.join(E,a),k=(d.value.trim()||"latest site version").replace(/"/g,'\\"');s.disabled=!0,d.disabled=!0,e("Preparing to push site...","status");try{e("Setting Git user identity for this operation...","status"),await this.plugin.execShellCommand('git config user.name "Krems Obsidian Plugin"',p),await this.plugin.execShellCommand('git config user.email "krems-plugin@example.com"',p),e("Adding files (git add .)...","status"),await this.plugin.execShellCommand("git add .",p),e(`Committing with message: "${k}"...`,"status");try{await this.plugin.execShellCommand(`git commit -m "${k}"`,p)}catch(w){if(w.toString().includes("nothing to commit"))e("No changes to commit. Proceeding to push...","status");else throw w}e("Pushing to remote repository...","status");let b="git push",{gitPassword:M,githubRepoUrl:P}=this.plugin.settings;if(M&&P.startsWith("https://")){let w=P.substring(8),D=`https://${M}@${w}`,U="main";try{U=await this.plugin.execShellCommand("git rev-parse --abbrev-ref HEAD",p)}catch($){console.warn("Could not determine current branch, defaulting to 'main'. Error:",$),e('Warning: Could not determine current branch, attempting to push to "main".',"status")}b=`git push ${D} ${U}`,e(`Pushing to ${P} with authentication...`,"status")}else e(`Pushing to ${P} (no token/password provided or not HTTPS URL)...`,"status");await this.plugin.execShellCommand(b,p),e("Site pushed successfully!","success")}catch(b){console.error("Push error:",b),e(`Push failed: ${b}`,"error")}finally{s.disabled=!1,d.disabled=!1}}),(!this.plugin.settings.localMarkdownPath||!this.plugin.settings.githubRepoUrl)&&(s.disabled=!0,d.disabled=!0,g.createEl("p",{text:"Please set Local Markdown Directory and GitHub Repo URL in settings.",cls:"krems-warning"})),t.createEl("hr");let r=t.createEl("p",{cls:"krems-modal-footer"});r.setText("For help, see the "),r.createEl("a",{text:"plugin documentation",href:"https://github.com/mreider/krems-obsidian-plugin/",attr:{target:"_blank",rel:"noopener noreferrer"}}),r.appendText(".")}onClose(){let{contentEl:t}=this;t.empty()}},L=class extends h.PluginSettingTab{constructor(t,n){super(t,n);this.plugin=n}display(){let{containerEl:t}=this;t.empty(),t.createEl("h2",{text:"Krems Publisher Settings"});let n=(s,i,e,r)=>{s.classList.remove("krems-input-valid","krems-input-invalid"),i.classList.remove("krems-feedback-valid","krems-feedback-invalid"),i.textContent=e,i.style.display=e?"block":"none",e&&(s.classList.add(r?"krems-input-valid":"krems-input-invalid"),i.classList.add(r?"krems-feedback-valid":"krems-feedback-invalid"))},c=new h.Setting(t).setName("GitHub Repository URL").setDesc("HTTPS URL of your GitHub repository (e.g., https://github.com/username/repo). Do not include .git at the end."),y=c.controlEl.createEl("div",{cls:"krems-setting-feedback",attr:{id:"repo-url-feedback",style:"display: none; margin-top: 5px;"}});c.addText(s=>{s.setPlaceholder("https://github.com/username/repo").setValue(this.plugin.settings.githubRepoUrl).onChange(async i=>{this.plugin.settings.githubRepoUrl=i.trim(),await this.plugin.saveSettings()}),s.inputEl.addEventListener("focusout",async()=>{let i=this.plugin.settings.githubRepoUrl,e=!0,r="";if(!i){n(s.inputEl,y,"",!0);return}if(!i.startsWith("https://github.com/"))e=!1,r="URL must start with https://github.com/";else if(i.endsWith(".git"))e=!1,r="URL should not end with .git";else{let a=i.substring(19).split("/");(a.length<2||!a[0]||!a[1])&&(e=!1,r="Invalid GitHub repository URL format.")}e&&r===""&&(r="URL format is valid."),n(s.inputEl,y,r,e)}),this.plugin.settings.githubRepoUrl&&s.inputEl.dispatchEvent(new Event("focusout"))});let l=new h.Setting(t).setName("Local Markdown Directory").setDesc("Path to the directory in your vault for your Krems site (e.g., MyKremsSite)."),g=l.controlEl.createEl("div",{cls:"krems-setting-feedback",attr:{id:"local-path-feedback",style:"display: none; margin-top: 5px;"}});l.addText(s=>{s.setPlaceholder("e.g., MyKremsSite or path/to/site").setValue(this.plugin.settings.localMarkdownPath).onChange(async i=>{this.plugin.settings.localMarkdownPath=i.trim(),await this.plugin.saveSettings()}),s.inputEl.addEventListener("focusout",async()=>{let i=this.plugin.settings.localMarkdownPath,e=!1,r="";if(!i){n(s.inputEl,g,"",!0);return}let a=this.app.vault.getAbstractFileByPath(i);a&&a instanceof h.TFolder?(e=!0,r="Directory exists."):(e=!1,r="Directory not found in the vault."),n(s.inputEl,g,r,e)}),this.plugin.settings.localMarkdownPath&&s.inputEl.dispatchEvent(new Event("focusout"))}),new h.Setting(t).setName("GitHub Personal Access Token (PAT)").setDesc('Required for pushing to HTTPS repositories. Create a PAT on GitHub with "repo" scope. See plugin README for instructions.').addText(s=>{s.inputEl.type="password",s.setPlaceholder("Enter your GitHub PAT").setValue(this.plugin.settings.gitPassword||"").onChange(async i=>{this.plugin.settings.gitPassword=i,await this.plugin.saveSettings()})}),t.createEl("hr");let d=t.createEl("p",{cls:"krems-settings-footer"});d.setText("For plugin instructions, troubleshooting, and more information, please visit the "),d.createEl("a",{text:"plugin documentation on GitHub",href:"https://github.com/mreider/krems-obsidian-plugin/",attr:{target:"_blank",rel:"noopener noreferrer"}}),d.setText(".")}};
